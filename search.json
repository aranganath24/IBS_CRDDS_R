[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Crash Course in R for Social Scientists",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\ntesting\n1 2 3\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "session1.html",
    "href": "session1.html",
    "title": "2  R Foundations",
    "section": "",
    "text": "2.1 R and R Studio Installation\nIn this lesson, we’ll learn some important foundational concepts related to the R programming language. We will discuss R as a calculator, and object assignment, but will spend most of our time learning about three fundamental data structures that you will use all the time when working on applied social science research projects in R: vectors, data frames, and lists.\nIf you haven’t already, please go ahead and install both the R and RStudio applications. R and RStudio must be installed separately; you should install R first, and then RStudio. The R application is a bare-bones computing environment that supports statistical computing using the R programming language; RStudio is a visually appealing, feature-rich, and user-friendly interface that allows users to interact with this environment in an intuitive way. Once you have both applications installed, you don’t need to open up R and RStudio separately; you only need to open and interact with RStudio (which will run R in the background).\nPlease follow these instructions to download R and R Studio; make sure you download the version of R appropriate for your operating system.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Foundations</span>"
    ]
  },
  {
    "objectID": "session1.html#the-r-studio-interface",
    "href": "session1.html#the-r-studio-interface",
    "title": "2  R Foundations",
    "section": "2.2 The R Studio Interface",
    "text": "2.2 The R Studio Interface\nNow that we’ve installed and opened up RStudio, let’s familiarize ourselves with the RStudio interface. When we open up RStudio, we’ll see a window that looks something like this:\nNow that we’ve installed and opened up RStudio, let’s familiarize ourselves with the RStudio interface. When we open up RStudio, we’ll see a window that looks something like this:\n\n\n\n\n\n\n\n\nFigure 2.1: The R Studio Interface\n\n\n\n\n\nIf your interface doesn’t look exactly like this, it shouldn’t be a problem; we would expect to see minor cosmetic differences in the appearance of the interface across operating systems and computers (based on how they’re configured). However, you should see four distinct windows within the larger RStudio interface:\n\nThe top-left window is known as the Source window.\n\nThe Source window is where we can write our R scripts (including the code associated with this tutorial), and execute those scripts. We can also type in R code into the “Console” window (bottom-left window), but it is preferable to write our code in a script within the source window. That’s because scripts can be saved (while code written into the console cannot); writing scripts therefore allows us to keep track of what we’re doing, and facilitates the reproducibility of our work. Note that in some cases, we may not see a Source window when we first open RStudio. In that case, to start a new script, simply click the File button on the RStudio menu bar, scroll down to New File button, and then select R Script from the menu bar that opens up.\nIt’s also worth noting that the outputs of certain functions will appear in the Source window. In the context of our tutorial, when we want to view our datasets, we will use the View() function, which will display the relevant data within a new tab in the Source window.\n\nThe top-right window is the Environment/History pane of the RStudio interface.\n\nThe “Environment” tab of this window provides information on the datasets we’ve loaded into RStudio, as well as objects we have defined (we’ll talk about objects more later in the tutorial). -The “History” tab of the window provides a record of the R commands we’ve run in a given session.\n\nThe bottom-right window is the Files/Plots/Packages/Help/Viewer window.\n\nThe “Files” tab displays our computer’s directories and file structures and allows us to navigate through them without having to leave the R environment.\nThe “Plots” tab is the tab where we can view any visualizations that we create. Within the “Plots” tab, make note of the “Zoom” button, which we can use to enlarge the display of our visualizations if they’re too compressed in the “Plots” window. Also, note the “Export” button within the “Plots” tab (next to the “Zoom” button); we can use this button to export the displayed visualization to a .png or .jpeg file that can be used outside of RStudio.\nThe “Packages” tab provides information on which packages have been installed, as well as which packages are currently loaded (more on packages in Sections 2.3 and 2.4 below)\nThe “Help” tab displays documentation for R packages and functions. If you want to know more about how a package or function work, we can simply type a “?” followed by the package or function’s name (no space between the question mark and the name) and relevant information will be displayed within the “Help” tab.\nThe “Viewer” tab displays HTML output. If we write code that generates an HTML file, we can view it within the “Viewer” tab.\n\nThe bottom-left window is the Console/Terminal/Jobs window.\n\nThe “Console” tab is where we can see our code execute when we run our scripts, as well as certain outputs produced by those scripts. In addition, if there are any error or warning messages, they will be printed to the “Console” tab. We can also type code directly into the console, but as we noted earlier, it is better practice to write our code in a script and then run it from there.\nThe “Terminal”, “Jobs” tabs are not relevant for our workshop. We’ll briefly provide an overview of “R Markdown” towards the end of the lesson.\n\n\nWe’re now ready to begin writing some basic code in R. Please go ahead and open up a new script, and follow along by typing the code as we go. To open up a new script, go to File, then click New File, then select R Script.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Foundations</span>"
    ]
  },
  {
    "objectID": "session1.html#r-as-a-calculator",
    "href": "session1.html#r-as-a-calculator",
    "title": "2  R Foundations",
    "section": "2.3 R as a Calculator",
    "text": "2.3 R as a Calculator\nAt its most basic level, R can be used as a calculator. For instance:\n\n# calculates 2+2\n2+2\n\n[1] 4\n\n\nWhen you type this code out in your script, it should look something like this:\n\n\n\n\n\n\n\n\nFigure 2.2: Starting an R Studio Script\n\n\n\n\n\nTo run the code, you can highlight it and click the Run button (boxed in red). Alternatively, you can place the cursor on the line of code you’d like to run, and use a keyboard shortcut to run the code. On a Mac, the shortcut is clicking Command + Shift + Return. If you are using Windows, the keyboard shortcut to run the current line of code should be Ctrl + Enter.\nYou should go ahead and save the script in a convenient location by clicking File and then Save As. You should periodically save your work. After you close your R Session, you can always open your saved script, and quickly run the entire script to reproduce your work from prior sessions. To reproduce more than one line of code, or even an entire script, simply highlight the code yoou want to run and click the Run button in the R Studio interface. On a Mac, the shortcut for running all of the code in your script is Cmd + Option + R. On a Windows machine, the shortcut to run the entirety of a script is Ctrl + Shift + Enter.\nBefore proceeding, one final thing you should note is that the actual code, 2+2, was preceded by a “comment” that was in turn preceded by a #; above, the comment was rather trivial, since it’s fairly self evident what the code was doing. But pretty soon, our code will become more complex and challenging to interpret, and code comments will be an essential way of documenting our work. These comment are an essential way we can communicate with others who might read our code, as well as our future selves. The # sign is always used to introduce a comment, and ensures that any text that comes after it will indeed be interpreted as a comment, rather than as code.\nNow, let’s try some more mathematical operations:\n\n# calculates 65 to the power of 4\n65^4\n\n[1] 17850625\n\n\n\n# calculates the sum of 24 and 4, divided by 7\n(24+4)/7\n\n[1] 4\n\n\n\n# calculates 2.78 subtracted from 10.453\n10.453-2.78\n\n[1] 7.673\n\n\nWhile this is a useful and logical starting point, the possibility of assigning values to objects (or variables) considerably increases the scope of the operations we are able to carry out. We turn to object assignment in the next sub-section.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Foundations</span>"
    ]
  },
  {
    "objectID": "session1.html#object-assignment-and-manipulation",
    "href": "session1.html#object-assignment-and-manipulation",
    "title": "2  R Foundations",
    "section": "2.4 Object Assignment and Manipulation",
    "text": "2.4 Object Assignment and Manipulation\nThe concept of object (or variable) assignment is a fundamental concept when working in a scripting environment; indeed, the ability to easily assign values to objects is what allows us to easily and intuitively manipulate and process our data in a programmatic setting. To better understand the mechanics of object assignment, consider the following:\n\n# assign value 5 to new object named x\nx &lt;- 5\n\nIn the code above, we use R’s assignment operator, &lt;- (i.e. a left-pointing arrow) to assign the value 5 to an object named x. Now that an object named x has been created and assigned the value 5, printing x in our console (or printing x in our script and running it) will return the value that has been assigned to the x object, i.e. 5:\n\n# prints value assigned to \"x\"\nx\n\n[1] 5\n\n\nMore generally, the process of assignment effectively equates the output created by the code on the right side of the assignment operator (&lt;-) to an object with a name that is specified on the left side of the assignment operator. Whenever we want to look at the contents assigned to an object (i.e. the output created by the code to the right side of the assignment operator), we simply print the name of the object in the R console (or print the name and run it within a script).\nLet’s create another object, named y, and assign it the value “12”:\n\n# assign value 12 to new object named y\ny &lt;- 12\n\nAs we noted above, we can print the value that was assigned to y by printing the name of the object:\n\n# prints value assigned to \"y\"\ny\n\n[1] 12\n\n\nOnce objects are defined, it’s possible to use those objects in arithmetic operations. For example:\n\n# prints the value of x + y\nx+y\n\n[1] 17\n\n\nIt’s also possible to use existing objects to assign values to new ones. For example, we can assign the sum of x and y to a new object that we’ll name xy_sum:\n\n# creates a new object, named \"xy_sum\" whose value is the sum of \"x\" and \"y\"\nxy_sum &lt;- x+y\n\nNow, let’s print the value of xy_sumthat was created by the previous assignment operation:\n\n# prints value of of \"xy_sum\"\nxy_sum\n\n[1] 17\n\n\nAs expected, we see that the value assigned to xy_sum is “17” (i.e. the sum of the values assigned to x and y).\nIt is possible to change the value assigned to a given object. For example, let’s say we want to change the value assigned to x from “5” to “8”:\n\n# assign value of \"8\" to object named \"x\"\nx &lt;- 8\n\nWe can confirm that x is now associated with the value “8”, and the old value has been overwritten:\n\n# prints updated value of \"x\"\nx\n\n[1] 8\n\n\nIt’s worth noting that updating the value assigned to x will not automatically update the value assigned to xy_sum (which, recall, is the sum of x and y). If we print the value assigned to xy_sum, note that it is still “17”):\n\n# print value assigned to xy_sum\nxy_sum\n\n[1] 17\n\n\nIn order for the value assigned to xy_sum to be updated with the new value of x, we must run the assignment operation again, with the updated value of x:\n\n# assigns sum of \"y\" and newly updated value of \"x\" to \"xy_sum\" object\nxy_sum &lt;- x+y\n\nNow, the value of xy_sum should reflect the updated value of x, which we can confirm by printing the value of xy_sum:\n\n# prints value of \"xy_sum\"\nxy_sum\n\n[1] 20\n\n\nNote that the value assigned to xy_sum is now “20” (the sum of “8” and “12”), rather than “17” (the sum of “5” and “12”).\nThus far, we’ve been working with numeric values, but it’s also possible to assign non-numeric contents to objects. For example, we can assign strings (i.e. lines of text) to objects. Below, consider the string “Boulder, CO” assigned to an object named our_location:\n\n# assigns string \"Boulder, CO\" to object named \"our_location\"\nour_location &lt;- \"Boulder, CO\"\n\nWe can print the string that has been assigned to the our_location object by typing the name of the object in our console, or running it from our script:\n\n# prints contents assigned to \"our_location\" object\nour_location\n\n[1] \"Boulder, CO\"\n\n\n\n2.4.1 Naming Objects\nWhile the examples above were very simple, we can assign virtually any R code, and by extension, the data structure(s) generated by that code (such as datasets, vectors, graphs/plots, functions etc.) to an R object. When naming your objects, try to be descriptive, so that the name of the object signifies something about the code or outputs assigned to it.\nNote that generally speaking, you have a lot of flexibility in naming your R objects, but there are certain rules. For example, object names must start with a letter, and cannot contain any special symbols (they can only contain letters, numbers, underscores, and periods). Also, object names cannot contain multiple unconnected words; if you’d like to use multiple words or phrases, connect the discrete elements with an underscore (_), or use camel case (where different words are distinguished by beginning each discrete word with a capitalized letter). In addition, there are certain words that are “reserved” for other purposes, and therefore cannot be used in object names (i.e. if, else, TRUE , FALSE, etc).\nIt is also worth emphasizing that object names are case sensitive; in order to print the contents assigned to an object, that object’s name must be printed exactly as it was created. For example, if we were to type our_Location, we would get an error, since there is no our_Location object (only an our_location object):\n\n# prints contents of \"our_Location\"\nour_Location\n\nError: object 'our_Location' not found\n\n\nIn order to keep track of the objects we have created, we can use the handy ls() function, which will print the names of all the objects that are in memory:\n\n# prints objects in memory\nls()\n\n[1] \"our_location\" \"x\"            \"xy_sum\"       \"y\"           \n\n\nTo delete an object from memory, you can pass it to the rm() function. For example, the following will delete the our_location object from memory:\n\n# deletes \"our_location\" object from memory\nrm(our_location)\n\nNow, we can confirm that the our_location object has indeed been deleted by running ls() once again:\n\n# prints objects in memory\nls()\n\n[1] \"x\"      \"xy_sum\" \"y\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Foundations</span>"
    ]
  },
  {
    "objectID": "session1.html#data-structures",
    "href": "session1.html#data-structures",
    "title": "2  R Foundations",
    "section": "2.5 Data Structures",
    "text": "2.5 Data Structures\nWe now turn to a brief overview of some important data structures that help us to work with data in R. We will consider three data structures that are particularly useful: vectors, data frames, and lists. Note that this is not an exhaustive treatment of data structures in R; there are other structures, such as matrices and arrays, that are also important, and which you may encounter or use in your future work. However, for now, we will limit our discussion to vectors, data frames, and lists, since they are the data structures that are essential for getting started with data-based social scientific research in R, and the data structures that you will likely use most frequently.\n\n2.5.1 Vectors\nIn R, a vector is a sequence of values of the same type (i.e. we can have a sequence of numbers or a sequence of strings, but cannot mix and match types in a vector). A vector is created using the c() function. We’ll discuss functions at greater later, but for now you can think of a function as a programmed command that takes input(s), and returns output(s).\nFor example, let’s make a vector to store the temperatures (in Celsius) of some cities in Asia. The c() function takes as its input a series of numbers, and returns as its output a numeric vector with those numbers as elements:\n\n# makes vector with values 32, 18, 41, 11\nc(32, 18, 41, 11)\n\n[1] 32 18 41 11\n\n\nRecall that we can assign vectors to objects with descriptive names. Let’s create a new vector object named asia_temperatures_celsius to store these values:\n\n# assigns vector of temperatures from Asian cities to a new object named \"asia_temperatures_celsius\"\nasia_temperatures_celsius&lt;-c(32, 18, 41, 11)\n\nNow, whenever we want to print the vector assigned to the asia_temperatures_celsius object, we can simply print the name of the object:\n\n# prints contents of \"asia_temperatures_celsius\"\nasia_temperatures_celsius\n\n[1] 32 18 41 11\n\n\nThough we have focused so far on numeric vectors (i.e. vectors where the elements are numbers), it is also possible to create vectors where the elements are strings (i.e. text). For example, let’s create a vector that contains the names of cities that have a University of Colorado campus, and assign it to an object named university_of_colorado_locations\n\n# defines new vector assigned to object named \"university_of_colorado_locations\" that contains locations of CU campuses\nuniversity_of_colorado_locations&lt;-c(\"Boulder\", \"Denver\", \"Colorado Springs\")\n\nNow let’s print out its contents:\n\n# prints contents of \"university_of_colorado_locations\"\nuniversity_of_colorado_locations\n\n[1] \"Boulder\"          \"Denver\"           \"Colorado Springs\"\n\n\n\n2.5.1.1 Vector labels\nSometimes, it can be useful to add text labels to numeric vectors, which can provide important context that helps us to keep track of the information stored within a vector. Let’s return to the asia_temperatures_celsius vector we created above and imagine that the first element in the vector represents the temperature for Mumbai; the second element represents the temperature in Hanoi; the third represents the temperature in Singapore; and the fourth represents the temperature in Beijing. Let’s add these country labels to their corresponding temperature values in the asia_temperatures_celsiusvector. First, we’ll create a vector that contains these text labels and assign it to a new object named country_labels_vector:\n\n# creates country labels vector and assigns it to a new object names \"country_labels_vector\"\ncountry_labels_vector&lt;-c(\"Mumbai\", \"Hanoi\", \"Singapore\", \"Beijing\")\n\nNow, we’ll use the names() function to assign the labels in country_labels_vector to the temperature values in asia_temperatures_celsius. The first label in country_labels_vector will be assigned to the first temperature value in asia_temperatures_celsius, to indicate that that the temperature of 37 degrees Celsius is associated with Mumbai; the second label in country_labels_vector will be assigned to the second temperature value in asia_temperatures_celsius to indicate that the temperature value of 17 degrees Celsius is associated with Hanoi; and so on.\n\n# uses the \"names\" function to assign the labels in \"country_labels_vector\" to the \"asia_temperatures_celsius\" numeric vector\nnames(asia_temperatures_celsius)&lt;-country_labels_vector\n\nNow, let’s view the contents of asia_temperatures_celsius, and note that the numeric values are labelled with the text strings contained in country_labels_vector:\n\n# prints updated \"asia_temperatures_celsius\" vector with labels\nasia_temperatures_celsius\n\n   Mumbai     Hanoi Singapore   Beijing \n       32        18        41        11 \n\n\nIt is also possible to add labels to a vector during the process of creating that vector, rather than doing so subsequently; creating labels concurrently with the vector is known as “inline naming”. Below, we create a vector of temperatures in some major North American cities in Celsius using inline naming:\n\n# creates new vector of temperatures in Celsius of major North American cities with labels created using inline naming\nnorth_america_temperatures_celsius&lt;-c(\"New York City\"=25, \"Toronto\"=15, \"Mexico City\"=8.5, \"Vancouver\"=10, \"Boston\"=12.5)\n\nLet’s print the contents of the newly created north_america_temperatures_celsius vector:\n\n# prints contents of \"north_america_temperatures_celsius\"\nnorth_america_temperatures_celsius\n\nNew York City       Toronto   Mexico City     Vancouver        Boston \n         25.0          15.0           8.5          10.0          12.5 \n\n\n\n\n2.5.1.2 Indexing, Subsetting, and Modifying Vectors\nIn many cases, it is useful to subset a vector, and extract specific element(s) from it. Each element in a given vector is assigned an index number, starting with 1; that is, the first element in a vector is assigned an index value of 1, the second element of a vector is assigned an index value of 2, and so on. We can use these index values to extract our desired vector elements. In particular, we can specify the desired index within square brackets after printing the name of the vector object of interest. For example, let’s say we want to extract the 3rd element of the vector in asia_temperature_difference_celsius. We can do so with the following, which returns the temperature value for Singapore, the third element in asia_temperature_difference_celsius:\n\n# Extracts the third element from the \"asia_temperatures_celsius\" vector\nasia_temperatures_celsius[3]\n\nSingapore \n       41 \n\n\nSince asia_temperatures_celsius has been labelled, it’s also possible to extract vector elements based on their label. For example, instead of extracting Singapore’s temperature with its corresponding index value of three, we can do so with the city label enclosed in quotation marks:\n\n# Extracts the third element from the \"asia_temperatures_celsius\" vector using its label\nasia_temperatures_celsius[\"Singapore\"]\n\nSingapore \n       41 \n\n\nIn some cases, we may want to extract more than one vector element. We can conveniently extract a range of vector elements using their index values.For example, let’s say we want to extract a new vector comprised of the first, second, and third numeric elements in asia_temperatures_celsius; we can do so with the following:\n\n# Extracts elements 1 through 3 in the \"asia_temperatures_celsius\" and deposits these elements in a new vector\nasia_temperatures_celsius[1:3]\n\n   Mumbai     Hanoi Singapore \n       32        18        41 \n\n\nThus far, we have not assigned our subsetted vectors to new objects, but we can easily do so if we want to call those vectors again down the road. Below, for example, we assign the vectors we just subsetted in the last line of code that we ran to a new object named asia_temperatures_subsetted_1to3:\n\n# Extracts elements 1 through 3 in the \"asia_temperatures_celsius\" and deposits these elements in a new vector assigned to the object \"asia_temperatures_subsetted_1to3\"\nasia_temperatures_subsetted_1to3&lt;-asia_temperatures_celsius[1:3]\n\n# prints contents of \"asia_temperatures_subsetted_1to3\"\nasia_temperatures_subsetted_1to3\n\n   Mumbai     Hanoi Singapore \n       32        18        41 \n\n\nWe can also use negative index numbers to subset vectors; in particular, while passing a positive index number will extract the vector element that corresponds with that number and creates a new vector with that subsetted element, passing a negative index number will return a vector that deletes the element that corresponds to the the absolute value of the negative index number. For example, the following removes the temperature associated with Hanoi (the second element in asia_temperatures_celsius) and returns a new vector with the remaining temperatures:\n\n# removes second element in \"asia_temperatures_celsius\" vector and returns a vector with the remaining values\nasia_temperatures_celsius[-2]\n\n   Mumbai Singapore   Beijing \n       32        41        11 \n\n\nIt’s also possible to delete a range of elements in a vector using negative index numbers. Below, for example, we delete the second and third elements from asia_temperatures_celsius and return a vector with the remaining values:\n\n# removes second and third elements in \"asia_temperatures_celsius\" vector (i.e. the temperatures associated with Hanoi and Singapore) and returns a vector with the remaining temperature values\nasia_temperatures_celsius[-2:-3]\n\n Mumbai Beijing \n     32      11 \n\n\nSometimes, we may want to subset our vectors by referencing non-consecutive elements. For example, instead of extracting the first through third elements of the asia_temperatures_celsius vector, perhaps we only want to extract the first and third elements, without also extracting the second. Intuitively, we could try the following:\n\n# tries to extract the first and third elements from \"asia_temperatures_celsius\" and deposit them into a new vector\nasia_temperatures_celsius[1,3]\n\nError in asia_temperatures_celsius[1, 3]: incorrect number of dimensions\n\n\nHowever, as you can see, this syntax throws an error. Instead, if we want to extract non-continuous elements from a vector, we have to pass the index numbers into their own vector, and enclose this vector of index numbers in square brackets. For example, to extract only the first and third elements from asia_temperatures_celsius, we would do the following:\n\n# extracts the first and third elements from \"asia_temperatures_celsius\" and deposits them into a new vector\nasia_temperatures_celsius[c(1,3)]\n\n   Mumbai Singapore \n       32        41 \n\n\nThe same syntax can be used when removing multiple non-consecutive elements; for example, let’s say we want to remove the first and third elements from the asia_temperatures_celsius vector, and create a new subsetted vector with the remaining elements. We can do so with the following:\n\n# Removes the first and third elements from \"asia_temperatures_celsius\" and makes a new vector with the remaining elements\nasia_temperatures_celsius[c(-1,-3)]\n\n  Hanoi Beijing \n     18      11 \n\n\nWe can also use this basic syntax to subset multiple vector elements using labels, rather than index numbers. For example:\n\n# extracts temperature values for Mumbai and Singapore and deposits them in a new vector using labels\nasia_temperatures_celsius[c(\"Mumbai\", \"Singapore\")]\n\n   Mumbai Singapore \n       32        41 \n\n\nThough we now have a sense of how to subset vectors, there might be instances in which you want to add new elements to a vector. For example, let’s say that we want to add temperature data (and associated labels) for some other cities to asia_temperatures_celsius. Let’s say we want to add the temperature of Jakarta, which was 32 degrees Celsius, and Manila, which was 26.5 degrees Celsius. We can do so with the following syntax:\n\n# Adds temperatures for Jakarta and Manila to the \"asia_temperatures_celsius\" vector\nasia_temperatures_celsius&lt;-c(asia_temperatures_celsius, \"Jakarta\"=32, \"Manila\"=26.5)\n\nIn particular, we call the function to make vectors (c()); the first argument is the name of the vector object to which we’re adding elements, and the subsequent arguments are the numeric elements along with their labels. We can confirm that the new elements have been added by printing out the contents of the updated asia_temperatures_celsius vector:\n\n# prints contents of updated \"asia_temperatures_celsius\" vector\nasia_temperatures_celsius\n\n   Mumbai     Hanoi Singapore   Beijing   Jakarta    Manila \n     32.0      18.0      41.0      11.0      32.0      26.5 \n\n\nIn some cases, we may have two or more vectors that we want to combine into a single, unified vector. For example, let’s say we want to combine our vector of temperatures in Asian cities (asia_temperatures_celsius) with our vector of temperatures in North American cities (north_america_temperatures_celsius). We can do so by passing the name of these vector objects to the c() function; below, we’ll assign this combined vector to a new object named asia_north_america_temperatures_celsius:\n\n# combines \"asia_temperatures_celsius\" vector and \"north_america_temperatures_celsius\" into a new combined vector that's assigned to an object named \"asia_north_america_temperatures_celsius\"\nasia_north_america_temperatures_celsius&lt;-c(asia_temperatures_celsius, north_america_temperatures_celsius)\n\nLet’s print the contents of asia_north_america_temperatures_celsius to confirm that the vectors have been combined as expected:\n\n# prints contents of \"asia_north_america_temperatures_celsius\"\nasia_north_america_temperatures_celsius\n\n       Mumbai         Hanoi     Singapore       Beijing       Jakarta \n         32.0          18.0          41.0          11.0          32.0 \n       Manila New York City       Toronto   Mexico City     Vancouver \n         26.5          25.0          15.0           8.5          10.0 \n       Boston \n         12.5 \n\n\nThe basic principles and code we’ve used to subset and modify numeric vectors (i.e. vectors comprised of numeric elements) can be applied to subset and modify character vectors (i.e. vectors comprised of string/text elements). Recall the character vector of University of Colorado locations, university_of_colorado locations. We can use index numbers to extract elements from character vectors in much the same way we do for numeric vectors.\n\n# extracts the second element from \"university_of_colorado_locations\"\nuniversity_of_colorado_locations[2]\n\n[1] \"Denver\"\n\n\nWe can also subset a character vector using index numbers to extract a range of elements:\n\n# extracts the second and third elements from \"university_of_colorado_locations\"\nuniversity_of_colorado_locations[2:3]\n\n[1] \"Denver\"           \"Colorado Springs\"\n\n\nWe could get the same result using a negative index number to delete the first element:\n\n# extracts the second and third elements from \"university_of_colorado_locations\" using a negative index number to remove the first element\nuniversity_of_colorado_locations[-1]\n\n[1] \"Denver\"           \"Colorado Springs\"\n\n\nWe can also combine character vectors. For example, let’s say we have a vector that contains the locations of Colorado State University campuses:\n\n# creates character vector of CSU campus locations and assigns it to a new vector named \"colorado_state_university_locations\"\ncolorado_state_university_locations&lt;-c(\"Fort Collins\", \"Pueblo\")\n\nAnd we want to combine colorado_state_university_locations with university_of_colorado_locations to form a new character vector. We can do so with the following:\n\n# creates new character vector that combines elements from \"university_of_colorado_locations\" and \"colorado_state_university_locations\" and assigns it to a new object named \"co_public_university_locations\"\nco_public_university_locations&lt;-c(university_of_colorado_locations, colorado_state_university_locations)\n\n# prints contents of \"co_public_university_locations\"\nco_public_university_locations\n\n[1] \"Boulder\"          \"Denver\"           \"Colorado Springs\" \"Fort Collins\"    \n[5] \"Pueblo\"          \n\n\nIt’s also possible to add labels to character vectors, which can be a useful way of embedding metadata in our character vectors. For example, let’s say we want to add labels to co_public_university_locations indicating whether a location corresponds to a UC or CSU institution. We can do so with the names() unction, as we did with numeric vectors:\n\n# uses the \"names\" function to assign labels to the \"co_public_university_locations\" vector elements\nnames(co_public_university_locations)&lt;-c(\"UC\", \"UC\", \"UC\", \"CSU\", \"CSU\")\n\n# prints contents of \"co_public_university_locations\" updated with labels\nco_public_university_locations\n\n                UC                 UC                 UC                CSU \n         \"Boulder\"           \"Denver\" \"Colorado Springs\"     \"Fort Collins\" \n               CSU \n          \"Pueblo\" \n\n\nWe can use the same procedure we used with numeric vectors to create “inline” (i.e. concurrent) labels. To see this, let’s create a vector with the location of the flagship institutions of the University of Colorado and Colorado State systems, respectively, with labels designating which system the university associated with that location is a part of:\n\n# creates vector of flagship university locations, with labels designating if a location is associated with the UC or CSU flagship\nflagship_university_locations&lt;-c(UC=\"Boulder\", CSU=\"Fort Collins\")\n\n# prints contents of \"flagship_university_locations\"\nflagship_university_locations\n\n            UC            CSU \n     \"Boulder\" \"Fort Collins\" \n\n\nFinally, if we want to add new elements to an existing character vector, we can use the same syntax we used for numeric vectors. The Colorado State University system also includes a Global online university that we didn’t include in our vectors above. Let’s say we want to add CSU-Global to the colorado_state_university_locations vector. We can do so with the following:\n\n# Adds \"Global\" campus to \"colorado_state_university_locations\" vector\ncolorado_state_university_locations&lt;-c(colorado_state_university_locations, \"Global\")\n\n# prints updated contents of \"colorado_state_university_locations\" \ncolorado_state_university_locations\n\n[1] \"Fort Collins\" \"Pueblo\"       \"Global\"      \n\n\nLet’s say we also want to add the global location to co_public_university_locations with a corresponding label. We can do so with the following:\n\n# adds global location to \"co_public_university_locations\" along with CSU label\nco_public_university_locations&lt;-c(co_public_university_locations, CSU=\"Global\")\n\n# prints updated contents of \"co_public_university_locations\"\nco_public_university_locations\n\n                UC                 UC                 UC                CSU \n         \"Boulder\"           \"Denver\" \"Colorado Springs\"     \"Fort Collins\" \n               CSU                CSU \n          \"Pueblo\"           \"Global\" \n\n\n\n\n2.5.1.3 Vectorized Operations\nOnce a vector has been created, it’s possible to carry out operations on its elements; it’s important to briefly get an intuitive sense for how such vector operations work. There are different types of vector operations to be aware of. There are scalar operations, which involve arithmetic operations apply a constant value to every element of a numeric vector (i.e. adding ten to each vector element). It’s also possible to carry out arithmetic operations with more than one vector (i.e. adding two vectors together); such operations are typically known as vector operations. More generally, one of R’s benefits is that it allows us to use vectors to carry out iterative (repeated) operations without using programming constructs such as loops. For example, if you have some data and want to apply a formula or function to all of your data points, you could simply put those data points into a vector, and apply the formula or function to that vector, which will implement the desired operation on each element of the vector. Such operations, along with scalar and vector operations, are collectively referred to as “vectorized operations.”\nLet’s first consider scalar operations. Let’s go back to the asia_temperatures_celsius vector and remind ourselves of it its contents:\n\n# prints contents of \"asia_temperatures_celsius\"\nasia_temperatures_celsius\n\n   Mumbai     Hanoi Singapore   Beijing   Jakarta    Manila \n     32.0      18.0      41.0      11.0      32.0      26.5 \n\n\nLet’s say that something went wrong in the transcription of temperatures, and all of the temperatures in asia_temperatures_celsius are understated by two degrees. We can add two to each element in the asia_temperatures_celsius vector, and thereby fix the error, with the following scalar operation:\n\n# adds two to each element of \"asia_temperatures_celsius\" vector\nasia_temperatures_celsius+2\n\n   Mumbai     Hanoi Singapore   Beijing   Jakarta    Manila \n     34.0      20.0      43.0      13.0      34.0      28.5 \n\n\nOf course, the above operation did not permanently add two to all of the elements in asia_temperatures_celsius, since we did not overwrite the existing vector by assigning the changes back to the object. We can do so with the following:\n\n# adds two to each element of \"asia_temperatures_celsius\" vector and assigns the changes back to the object\nasia_temperatures_celsius&lt;-asia_temperatures_celsius+2\n\nWe can now confirm that each of the temperature values in asia_temperatures_celsius have been increased by two:\n\n# prints updated contents of \"asia_temperatures_celsius\"\nasia_temperatures_celsius\n\n   Mumbai     Hanoi Singapore   Beijing   Jakarta    Manila \n     34.0      20.0      43.0      13.0      34.0      28.5 \n\n\nLet’s now consider another vectorized operation that’s slightly more complex. Let’s say we want to convert the Celsius temperatures in asia_temperatures_celsius to Fahrenheit values, which are stored in a new asia_temperatures_fahrenheit vector object. We can do so by applying the Celsius to Fahrenheit conversion formula to asia_temperatures_celsius with the following:\n\n# applies the Celsius to Fahrenheit conversion formula to all of the Celsius temperatures in \"asia_temperatures_fahrenheit\" and assigns the resulting vector of Fahrenheit temperatures to a new object named \"asia_temperatures_fahrenheit\"\nasia_temperatures_fahrenheit&lt;-asia_temperatures_celsius*(9/5)+32\n\nThe conversion formula of Celsius*(9/5)+32 is applied to the first element of asia_temperatures_celsius and the result is deposited as the first element in asia_temperatures_fahrenheit; the formula is then applied to the second element of asia_temperatures_celsius and the result is deposited as the second element in asia_temperatures_fahrenheit ; and so on. Let’s take a look at the contents of asia_temperatures_fahrenheit:\n\n# prints contents of \"asia_temperatures_fahrenheit\"\nasia_temperatures_fahrenheit\n\n   Mumbai     Hanoi Singapore   Beijing   Jakarta    Manila \n     93.2      68.0     109.4      55.4      93.2      83.3 \n\n\nThough we have been focused thus far on applying changes to a single vector, it is often the case that we may have information stored in multiple numeric vectors, and want to carry out mathematical operations that involves those vectors. For example, recall our vector of temperatures in North America:\n\n# prints contents of \"north_america_temperatures_celsius\"\nnorth_america_temperatures_celsius\n\nNew York City       Toronto   Mexico City     Vancouver        Boston \n         25.0          15.0           8.5          10.0          12.5 \n\n\nLet’s say we have another vector of North American temperatures for those same cities from a subsequent time period. Below, we’ll create this vector, and assign it to a new object named north_america_temperatures_celsius_B:\n\n# creates vector of temperatures in Celsius for the same North American cities as in the \"north_america_temperatures_celsius\" vector for a subsequent time period, and assigns the vector to a new object named \"north_america_temperatures_celsius_B\"\nnorth_america_temperatures_celsius_B&lt;-c(\"New York City\"=27, \"Toronto\"=11, \"Mexico City\"=8.5, \"Vancouver\"=10.5, \"Boston\"=17)\n\nNow, let’s say we want to compute the difference in temperatures across these time frames, and deposit the calculated temperature differences in a new vector. We do so below, assigning the vector of temperature differences to a new object named north_america_temperature_difference:\n\n# Computes the difference between \"north_america_temperatures_celsius_B\" and \"north_america_temperatures_celsius\" and assigns the difference to a new object named \"north_america_temperature_difference\"\nnorth_america_temperature_difference&lt;-north_america_temperatures_celsius_B-north_america_temperatures_celsius\n\nThe code above takes the first element in north_america_temperatures_celsius, subtracts it from the first element in north_america_temperatures_celsius_B, and deposits the difference as the first element in the new north_america_temperature_difference vector; it then takes the second element in north_america_temperatures_celsius, subtracts it from the second element in north_america_temperatures_celsius_B, and deposits the difference as the second element in the new north_america_temperature_difference vector; and so on for the other elements. In short, the corresponding elements of the two vectors are related through the mathematical operation of subtraction; this concept, wherein operations with multiple vectors are applied to the corresponding elements of those vectors, is often referred to as “element-wise operations”.\nGiven this framework of element-wise operations, it’s important to note what happens when carrying out operations with vectors of unequal length. Let’s create some toy vectors of unequal length and add them together:\n\n# creates two new vectors, \"a\" and \"b\" of unequal length\na&lt;-c(3,5,7)\nb&lt;-c(6,12,3,5)\n\na + b\n\nWarning in a + b: longer object length is not a multiple of shorter object\nlength\n\n\n[1]  9 17 10  8\n\n\nThe first three element-wise operations are straightforward: 3+6=9, 5+12=17, and 7+3=10. However, a does not have a fourth element, but b does; how is this handled? In short, the shorter vector is “recycled” (i.e. repeated) to match the length of the longer one. In this case, once we hit the end of a the recycling process goes back to the beginning, takes the element “3”, and uses it as the fourth element in the vector, which can be added to the fourth element of b to yield “8” as the fourth element in the resultant a+b vector. Let’s now slightly tweak this scenario by adding another element, “6”, to vector b :\n\na&lt;-c(3,5,7)\nb&lt;-c(6,12,3,5,6)\n\nWhat do you think happens when we carry out a+b? In particular, what do you think are the fourth and fifth elements of a+b? The principle of vector recycling suggests that the fourth element will be 8 (3+5), while the fifth element will be 11 (5+6):\n\na+b\n\nWarning in a + b: longer object length is not a multiple of shorter object\nlength\n\n\n[1]  9 17 10  8 11\n\n\nBeing aware of this property of vectors in R can be helpful in troubleshooting errors or unexpected behavior once you’re working with real-world data in R.\nIt is also possible to carry out vectorized operations on character vectors that are somewhat analogous to the mathematical operations carried out on numeric vectors. To illustrate one useful example that draws on the paste0() function, let’s first create two character vectors:\n\n# creates vector of university names\nuniversity_names&lt;-c(\"University of Colorado, \", \"Colorado State University, \")\n\n# creates vector of locations\nlocations&lt;-c(\"Boulder\", \"Fort Collins\")\n\nNow, we’ll use the paste() function to carry out an element-wise concatenation of the strings in these two vectors; we’ll assign the resulting vector of concatenated strings to a new object named university_name_location:\n\n# uses paste0 function to paste the strings in \"university_names\" and \"locations\" together in element-wise fashion and assign the resulting character vector to \"university_name_location\"\nuniversity_name_location&lt;-paste0(university_names, locations)\n\nLet’s go ahead and print the contents of university_name_location:\n\n# prints contents of \"university_name_location\"\nuniversity_name_location\n\n[1] \"University of Colorado, Boulder\"        \n[2] \"Colorado State University, Fort Collins\"\n\n\nVectorized operations with the paste0() can be very useful in creating names for objects and file names when working in applied settings.\n\n\n\n2.5.2 Data Frames\nThe data frame structure is the workhorse of data analysis in R. A data frame resembles a table, of the sort you might generate in a spreadsheet application.\nOften, the most important (and arduous) step in a data analysis workflow is to assemble disparate strands of data into a tractable data frame. What does it mean for a data frame to be “tractable”? One way to define this concept more precisely is to appeal to the concept of “tidy” data, which is often referenced in the data science world. Broadly speaking, a “tidy” data frame is a table in which:\n\nEach variable has its own column\nEach observation has its own row\nEach value has its own cell\n\nWe will work extensively with data frames later in the workshop, but let’s generate a toy data frame from scratch, and assign it to a new object. We will generate a data frame containing made up country-level data on basic economic, geographic, and demographic variables, and assign it to a new object named country_df. The data frame is created through the use of the data.frame() function, which has already been programmed into R. Column names and the corresponding column values are passed to the data.frame() function in the manner below, and the function effectively binds these different columns together into a table:\n\n# Creates a toy country-level data frame \ncountry_df&lt;-data.frame(Country=c(\"Country A\", \"Country B\", \"Country C\"),\n                       GDP=c(8000, 30000, 23500),\n                       Population=c(2000, 5400, 10000),\n                       Continent=c(\"South America\", \"Europe\", \"North America\"))\n\nTo observe the structure of the table, we can print it to the R console by simply printing the name of the object to which it has been assigned:\n\n# prints \"country_df\" data frame to console\ncountry_df\n\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America\n\n\nOne nice feature of R Studio is that instead of simply printing our data frames into the console, we can view a nicely formatted version of our data frame by passing the name of the data frame object through the View() function. For example, the code below will bring up the country_df data frame as a new tab in R Studio:\n\n# pulls up \"country_df\" data frame in R Studio data viewer\nView(country_df)\n\n\n\n\n\n\n\nNote the “tidy” features of this simple data frame:\n\nEach of the variables (i.e. GDP, Population, Continent) has its own column\nEach of the (country-level) observations has its own row\nEach of the values (i.e. country-level information about a given variable) has its own distinct cell\n\nLet’s now turn to a brief exploration of how to extract rows and columns from a data frame, using principles of indexing similar to what we learned in the context of working with vectors. Since data frames are the workhorse of social scientific research in R, we’ll spend considerably more time on data frames in future lessons; for now, we just want to get acquainted with some basic base R syntax that allows us to get started.\nUnlike vectors, data frames are two dimensional; that is, they have both rows and columns. Both rows and columns are assigned index numbers; the convention is to refer to the index number of rows first, followed by the index number for columns. We can reference index numbers within square brackets to extract rows, columns, or observations from a data frame.\nLet’s say, for example, that we want to extract the entire first row from country_df. We can do so with the following:\n\n# extracts entire first row from \"country_df\"\ncountry_df[1, ]\n\n    Country  GDP Population     Continent\n1 Country A 8000       2000 South America\n\n\nThe number “1” indicates that we want to extract the first row; we leave the second argument after the comma blank, to indicate that we want all of the columns associated with that row. If we want the entire second row, we can do the following:\n\n# extracts entire second row from \"country_df\"\ncountry_df[2, ]\n\n    Country   GDP Population Continent\n2 Country B 30000       5400    Europe\n\n\nIf, instead, we want to extract a particular column, we indicate the index number of the desired column as the second argument in square brackets. Assuming we want all the rows associated with that column, we leave the row index blank. For example, we can extract the entire third column with the following:\n\n# extracts entire third column from \"country_df\"\ncountry_df[, 3]\n\n[1]  2000  5400 10000\n\n\nThus far, we haven’t been assigning these subsetted elements of the country_df data frame object to their own objects, but we can easily do so if we want to have them handy for future use. For example:\n\n# extracts entire third column from \"country_df\" and assigns it to an object named country_df_column\ncountry_df_column&lt;-country_df[, 3]\n\n# prints contents of \"country_df_column\"\ncountry_df_column\n\n[1]  2000  5400 10000\n\n\n\n# extracts entire third row from \"country_df\" and assigns it to an object named country_df_row\ncountry_df_row&lt;-country_df[3, ]\n\n# prints contents of \"country_df_row\"\ncountry_df_row\n\n    Country   GDP Population     Continent\n3 Country C 23500      10000 North America\n\n\nWe can also extract more than one row or column. For example, let’s say we want to extract the entirety of the second and third rows. We can do so with the following:\n\n# extracts second and third rows from \"country_df\"\ncountry_df[2:3, ]\n\n    Country   GDP Population     Continent\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America\n\n\nIf, instead, we want to grab the second and third columns, we can run the following:\n\n# extracts second and third columns from \"country_df\"\ncountry_df[, 2:3]\n\n    GDP Population\n1  8000       2000\n2 30000       5400\n3 23500      10000\n\n\nAs you would expect, we can simultaneously select particular rows and columns. For example, let’s say we want to grab the second through third rows, and the first through third columns:\n\n# extracts second through third rows, and first through third columns from \"country_df\"\ncountry_df[2:3, 1:3]\n\n    Country   GDP Population\n2 Country B 30000       5400\n3 Country C 23500      10000\n\n\nAlternatively, let’s say we want to grab the first through second columns from the third row:\n\n# extracts the third row, and first and second columns, from \"country_df\"\ncountry_df[3, 1:2]\n\n    Country   GDP\n3 Country C 23500\n\n\nIf we want to extract non-consecutive rows or columns, we must pass the desired index numbers as a vector. For example, let’s say we want rows 1 and 3, but not row 2:\n\n# extracts first and third rows from \"country_df\", while excluding second row\ncountry_df[c(1,3), ]\n\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n3 Country C 23500      10000 North America\n\n\nLet’s say we want the first, second, and fourth columns:\n\n# extracts first, second, and fourth columns from \"country_df\"\ncountry_df[, c(1,2,4)]\n\n    Country   GDP     Continent\n1 Country A  8000 South America\n2 Country B 30000        Europe\n3 Country C 23500 North America\n\n\nOr, the first and third rows for the first, second and fourth columns:\n\n# extracts the first and third rows, and second and fourth columns, from \"country_df\" and assigns it to a new object named \"dataset_selection\"\ndataset_selection&lt;-country_df[c(1,3), c(1,2,4)]\n\n# prints contents of \"dataset_selection\"\ndataset_selection\n\n    Country   GDP     Continent\n1 Country A  8000 South America\n3 Country C 23500 North America\n\n\nBefore proceeding, it’s worth noting a convenient way to extract columns from a data frame, which we will often encounter when working with R. In particular, we can extract a column from a data frame by typing the name of the data frame object, followed by the dollar sign ($), followed by the name of the column we want to extract. For example, let’s say we want to extract the “Continent” column from country_df:\n\n# extracts \"Continent\" column from \"country_df\"\ncountry_df$Continent\n\n[1] \"South America\" \"Europe\"        \"North America\"\n\n\nLet’s take another example; we’ll extract the “GDP” column, and assign it to a new object named country_df_gdp:\n\n# extracts \"GDP\" column from \"country_df\" and assigns it to a new object named \"country_df_gdp\"\ncountry_df_gdp&lt;-country_df$GDP\n\nThe columns that comprise data frames are vectors, so when we extract a column, the resulting object is a vector. We will confirm this below, when we discuss the concept of data classes, which are closely related to data structures.\n\n\n2.5.3 Lists\nIn R, a list is a data structure that allows us to conveniently store a variety of different objects, of various types. For example, we can use a list to vectors, data frames, visualizations and graphs–basically any R object you can think of! It is also possible to store a list within a list.\nLists allow us to keep track of the various objects we create, and are therefore a useful data management tool. In addition, lists are very helpful to use when we want to perform iterative operations across multiple objects.\nWe can create lists in R using the list() function; the arguments to this function are the objects that we want to include in the list. In the code below, we’ll create a list (assigned to an object named example_list) using the list() function. It contains some of the objects we create earlier in the lesson: the numeric asia_temperatures_fahrenheit vector, the university_name_locationcharacter vector, the country_df data frame, and the selection from country_df, dataset_selection, which is also a data frame.\n\n# creates list whose elements are the \"arbitrary_values\" numeric vector, the \"months_four\" character vector, and the \"country_df\" data frame, and assigns it to a new object named \"example_list\"\nexample_list&lt;-list(asia_temperatures_fahrenheit, university_name_location, country_df, dataset_selection)\n\nNow that we’ve created our list object, let’s print out its contents:\n\n# prints contents of \"example_list\"\nexample_list\n\n[[1]]\n   Mumbai     Hanoi Singapore   Beijing   Jakarta    Manila \n     93.2      68.0     109.4      55.4      93.2      83.3 \n\n[[2]]\n[1] \"University of Colorado, Boulder\"        \n[2] \"Colorado State University, Fort Collins\"\n\n[[3]]\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America\n\n[[4]]\n    Country   GDP     Continent\n1 Country A  8000 South America\n3 Country C 23500 North America\n\n\nAs you can see, our list contains each of the various specified objects within a single, unified structure. We can access specific elements within a list using the specific index number of the desired element, in much the same way we did for vectors. When extracting a single list element from a list, the convention is to enclose the index number of the desired list element in double square brackets. For example, if we want to extract the country-level data frame from example_list, we can use the following:\n\n# extracts third element from \"example_list\"\nexample_list[[3]]\n\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America\n\n\nIf we want to subset a list, and extract more than one list element as a separate list, we can do so by creating a vector of the index values of the desired elements, and enclosing it in single brackets after the name of the list object. For example, if we wanted to generate a new list that contained only the first and third elements of example_list (the numeric vector of arbitrary values and the data frame), we would use the following syntax:\n\n# extracts first and third elements from \"example_list\"\nexample_list[c(1,3)]\n\n[[1]]\n   Mumbai     Hanoi Singapore   Beijing   Jakarta    Manila \n     93.2      68.0     109.4      55.4      93.2      83.3 \n\n[[2]]\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America\n\n\nWhile list elements are not automatically named, we can name our list element using the names()function. The first step is to define a character vector of desired names. We can specify any names we’d like but for the sake of illustration, let’s say we want to name the first list element “element1”, the second list element “element2”, and the third list element “element3”. Let’s create a vector of our desired names, and assign it to an object named name_vector:\n\n# creates a character vector of desired names for list elements, and assigns it to a new object named \"name_vector\"\nname_vector_list&lt;-c(\"element1\", \"element2\", \"element3\", \"element4\")\n\nNow, we’ll assign these names in name_vector to the list elements in example_list with the following:\n\n# assigns names from \"name_vector\" to list elements in \"example_list\"\nnames(example_list)&lt;-name_vector_list\n\nLet’s now print the contents of example_list:\n\n# prints contents of \"example_list\"\nexample_list\n\n$element1\n   Mumbai     Hanoi Singapore   Beijing   Jakarta    Manila \n     93.2      68.0     109.4      55.4      93.2      83.3 \n\n$element2\n[1] \"University of Colorado, Boulder\"        \n[2] \"Colorado State University, Fort Collins\"\n\n$element3\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America\n\n$element4\n    Country   GDP     Continent\n1 Country A  8000 South America\n3 Country C 23500 North America\n\n\nNote that the list elements now have names attached to them; the first character string in name_vectoris assigned as the name of the first element in example_list, the second character string in name_vector is assigned as the name of the second element in example_list, and so on.\nPractically speaking, we can now extract list elements using the assigned names. For example, if we want to extract the data frame from example_list, we could do so by its assigned name (“element3”), as follows:\n\n# Extracts the data frame from \"example_list\" by its assigned name\nexample_list[[\"element3\"]]\n\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America\n\n\nNote that even after assigning names to list elements, you can still extract elements by their index value, if you would prefer to do so:\n\n# Extracts the \"element3\" data frame from \"example_list\" by its index number\nexample_list[[3]]\n\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America\n\n\nWe can also create lists with inline naming (analogous to the inline naming of vector elements) instead of assigning names with the names() function after the fact. Below, we’ll name the list elements after their objects, with “le” (for “list element” appended to the name):\n\n# create a list with inline naming\nexample_list_alt&lt;-list(asia_temperatures_fahrenheit_le=asia_temperatures_fahrenheit, \n                       university_name_location_le=university_name_location, \n                       country_df_le=country_df, \n                       dataset_selection_le=dataset_selection)\n\nLet’s print the contents of example_list_alt:\n\n# prints contents of \"example_list_alt\"\nexample_list_alt\n\n$asia_temperatures_fahrenheit_le\n   Mumbai     Hanoi Singapore   Beijing   Jakarta    Manila \n     93.2      68.0     109.4      55.4      93.2      83.3 \n\n$university_name_location_le\n[1] \"University of Colorado, Boulder\"        \n[2] \"Colorado State University, Fort Collins\"\n\n$country_df_le\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America\n\n$dataset_selection_le\n    Country   GDP     Continent\n1 Country A  8000 South America\n3 Country C 23500 North America\n\n\nAnd confirm that we can extract elements with their assigned names:\n\n# extracts \"university_name_location\" vector from \"example_list_alt\" using its assigned name \nexample_list_alt[[\"university_name_location_le\"]]\n\n[1] \"University of Colorado, Boulder\"        \n[2] \"Colorado State University, Fort Collins\"\n\n\nIt’s also possible to make a list within a list (i.e. a “nested list”) which can sometimes come in handy for more complicated data workflows. However, we won’t use nested lists in our workshop series, so we will not cover that topic here.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Foundations</span>"
    ]
  },
  {
    "objectID": "session1.html#data-classes",
    "href": "session1.html#data-classes",
    "title": "2  R Foundations",
    "section": "2.6 Data Classes",
    "text": "2.6 Data Classes\nWe’re done with our tour of three fundamental data structures in R, which we will repeatedly use in our work as applied social scientists: vectors, data frames, and lists. Data structures are essentially containers for storing and organizing data in well-defined and organized ways, and R functions interact with object differently based on their underlying structure. An object’s “class” provides additional information about how it behaves. The class of an object generally corresponds to the object’s data structure (for example, the “data.frame” class is often associated with the data frame data structure), but the class of an object can also extend functionality, and customize how an object interacts with R. For example, “tibbles” are a type of enhanced data frame that are used in the tidyverse, and tibbles have the class “tbl_df”\nWe can retrieve the class of an object (i.e. extract information about whether an object behaves as a data frame, vector, list, or some other structure) by passing the name of the object as an argument to the class() function. For example, let’s say we want to confirm the class of example_list:\n\n# prints class of \"example_list\"\nclass(example_list)\n\n[1] \"list\"\n\n\nAs expected, example_list belongs to the class “list”.\nLet’s consider another:\n\n# prints class of \"asia_temperatures_fahrenheit\"\nclass(asia_temperatures_fahrenheit)\n\n[1] \"numeric\"\n\n\nAs expected, given how we created it, asia_temperatures_fahrenheit is of the class “numeric”, i.e. a numeric vector.\nLet’s retrieve the class of country_df:\n\n# prints class of \"country_df\"\nclass(country_df)\n\n[1] \"data.frame\"\n\n\nRecall that we extracted the “GDP” column from country_df and assigned it to an object named country_df_gdp. Recall that the columns of data frames are vectors, which means that we would expect country_df_gdp to be of the class “numeric”:\n\n# prints class of \"country_df_gdp\"\nclass(country_df_gdp)\n\n[1] \"numeric\"\n\n\nWhile data frame columns are vectors, rows are treated as data frames, which we can confirm by checking the class of country_df_row (i.e. the third row of country_df):\n\n# prints class of \"country_df_row\"\nclass(country_df_row)\n\n[1] \"data.frame\"\n\n\nSometimes, we will need to transform objects into a different class than the one they are currently assigned. For example, let’s say that a function we’d like to use can take a data frame input, but doesn’t accept vector inputs. In that case, if our data is stored as a numeric vector, we must convert the object to a data frame before passing it to the desired function. Let’s say the numeric vector data we want to convert to a data frame is asia_temperatures_fahrenheit. We can do so by passing it to the as.data.frame() function which converts objects of different classes to the “data.frame” class. We’ll assign the data frame version of asia_temperatures_fahrenheit to a new object named asia_temperatures_df and print its contents:\n\n# converts \"asia_temperatures_fahrenheit\" to data frame class and assigns the data frame to a new object named \"asia_temperatures_df\"\nasia_temperatures_df&lt;-as.data.frame(asia_temperatures_fahrenheit)\n\n# prints contents of \"asia_temperatures_df\"\nasia_temperatures_df\n\n          asia_temperatures_fahrenheit\nMumbai                            93.2\nHanoi                             68.0\nSingapore                        109.4\nBeijing                           55.4\nJakarta                           93.2\nManila                            83.3\n\n\nWe can confirm the new class of asia_temperatures_df with the following:\n\n# prints class of \"asia_temperatures_df\"\nclass(asia_temperatures_df)\n\n[1] \"data.frame\"\n\n\nWe could carry out the inverse operation (i.e. transforming an object of the “data.frame” class to an object of class “numeric”) by passing the data frame object to the as.numeric() function. There are several functions that allow for class transformations such as this. Classes may feel confusing now, but they will become more intuitive as you work in R. They are important to be aware of, especially in the context of trouble shooting and debugging, since functions often don’t work as expected when they expect arguments of one class but receive another.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Foundations</span>"
    ]
  },
  {
    "objectID": "session1.html#end-of-lesson-exercises",
    "href": "session1.html#end-of-lesson-exercises",
    "title": "2  R Foundations",
    "section": "2.7 End-of-Lesson Exercises",
    "text": "2.7 End-of-Lesson Exercises\nExercise 1\nConsider the following vector of Fahrenheit temperature values:\n\n# creates vector of Fahrenheit temperature values in Colorado\nfahrenheit_colorado &lt;- c(33, 15, 22, 44)\n\nThe first temperature is associated with Boulder; the second with Fort Collins; the third with Denver; and the fourth with Colorado Springs. Assign cities as labels to the temperature values with which they’re associated, and update fahrenheit_colorado with these changes.\n\n\nSuggested Solution to Exercise 1\n\n\n# assigns names to \"fahrenheit_colorado\" using the \"names\" function and a vector of names\nnames(fahrenheit_colorado) &lt;- c(\"Boulder\", \"Fort Collins\", \"Denver\", \"Colorado Springs\")\n\n# prints labeled \"fahrenheit_colorado\" vector\nfahrenheit_colorado\n\n         Boulder     Fort Collins           Denver Colorado Springs \n              33               15               22               44 \n\n\n\nExercise 2\nApply a transformation to fahrenheit_colorado that converts the temperature values to Celsius, and assign this new vector of Celsius temperatures to a new object named celsius_colorado.\n\n\nSuggested Solution to Exercise 2\n\n\n# applies Fahrenheit to Celsius conversion formula to \"fahrenheit_colorado\" and assigns resulting vector of Celsius values to a new object named \"celsius_colorado\"\ncelsius_colorado&lt;-(fahrenheit_colorado-32)*5/9\n\n# prints contents of \"celsius_colorado\"\ncelsius_colorado\n\n         Boulder     Fort Collins           Denver Colorado Springs \n       0.5555556       -9.4444444       -5.5555556        6.6666667 \n\n\n\nExercise 3\nTransform the class of the updated celsius_colorado object into “data.frame”, and assign the new data frame to an object named celsius_colorado_df.\n\n\nSuggested Solution to Exercise 3\n\n\n# uses \"as.data.frame\" function to transform \"celsius_colorado\" into a data.frame object, and assigns the data frame to a new object named \"celsius_colorado_df\"\ncelsius_colorado_df&lt;-as.data.frame(celsius_colorado)\n\n# prints contents of \"celsius_colorado_df\"\ncelsius_colorado_df\n\n                 celsius_colorado\nBoulder                 0.5555556\nFort Collins           -9.4444444\nDenver                 -5.5555556\nColorado Springs        6.6666667\n\n\n\nExercise 4\nConsider our toy country-level data frame, which is reproduced below:\n\n\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America\n\n\nA). What is the class of the “Continent” Column?\n\n\nSuggested Solution to Exercise 4A\n\n\n# extracts class of \"Continent\" column\nclass(country_df$Continent)\n\n[1] \"character\"\n\n\n\nB). Extract the “Population” column into a new object. What is it’s class? Convert it to the “data.frame” class.\n\n\nSuggested Solution to Exercise 4B\n\n\n# extracts \"Population\" column into a new object named \"country_df_population\"\ncountry_df_population&lt;-country_df$Population\n\n# prints class of \"country_df_population\"\nclass(country_df_population)\n\n[1] \"numeric\"\n\n# converts \"country_df_population\" to a data.frame\ncountry_df_population&lt;-as.data.frame(country_df_population)\n\n\nC. Extract the first three columns of country_df and assign this subsetted data frame to a new object. View it in the R Studio data viewer.\n\n\nSuggested Solution to Exercise 4C\n\n\n# extracts first three columns of \"country_df_columns\" and assigns it to a new object named \"country_df_columns\"\ncountry_df_columns&lt;-country_df[, 1:3]\n\n# prints \"country_df_columns\", pass object to View() function to see it in the data viewer\ncountry_df_columns\n\n    Country   GDP Population\n1 Country A  8000       2000\n2 Country B 30000       5400\n3 Country C 23500      10000\n\n\n\nD. Extract the value of Country B’s population using indexing.\n\n\nSuggested Solution to Exercise 4D\n\n\n# extracts Country B's population (2nd row, 3rd column)\ncountry_df[2,3]\n\n[1] 5400\n\n\n\nExercise 5\nDeposit fahrenheit_colorado, celsius_colorado , and country_df into a new list object. After you have done so, extract country_df from the list using index numbers and bracket notation. Then, assign the list elements names of your choosing, and extract the celsius_colorado list object using its name and bracket notation.\n\n\nSuggested Solution to Exercise 5\n\n\n# makes a list with the relevant elements and assigns it to a new object named \"exercise_list\"\nexercise_list&lt;-list(fahrenheit_colorado, celsius_colorado, country_df)\n\n# extracts \"country_df\" from list using its index\ncountry_df[[3]]\n\n[1]  2000  5400 10000\n\n# assigns names to \"exercise_list\"\nnames(exercise_list)&lt;-c(\"CO_F\", \"CO_C\", \"ToyDF\")\n\n# extracts data frame using its list label\nexercise_list[[\"ToyDF\"]]\n\n    Country   GDP Population     Continent\n1 Country A  8000       2000 South America\n2 Country B 30000       5400        Europe\n3 Country C 23500      10000 North America",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Foundations</span>"
    ]
  },
  {
    "objectID": "session2.html",
    "href": "session2.html",
    "title": "3  Functional Programming",
    "section": "",
    "text": "3.1 Built-In Functions\nIn this lesson, we’ll continue to develop an understanding of foundational skills and concepts that will allow you to use R effectively for applied social scientific research. Our goal is to develop an elementary proficiency in functional programming, which will allow you to fully exploit R’s capabilities when you use it for your research data tasks. A function is essentially a small program that takes an input (or series of inputs), run the input(s) through an algorithm, and produces output(s). Many functions come pre-programmed into R. R packages are essentially open-source user-written libraries of interrelated functions united by some theme, which we can draw on to extend the range of functions available to us. And finally, we can write our own custom-functions.\nGiven the enormous variety and sophistication of the R package ecosystem, you will not have to become an expert programmer to work with data in R; rather, you can draw on the functions others have written to implement virtually any data-related task you could imagine. However, developing a basic understanding of how to write your own functions is nevertheless important, for a variety of reasons:\nWith those considerations in mind, we’ll learn more in this lesson about built-in functions in R and R packages, but our main purpose is to learn how to write some simple functions of our own. We’ll also learn more about how to use functions from the purrr package (part of the tidyverse suite) to iteratively apply our functions to multiple objects, which can help to automate various data processing workflows. In other words, iteration is the process of applying a function to each element in a vector, list, or data frame; it is a key part of functional programming that can save you enormous amounts of time and energy.\nAs we have noted, functions are programmatic constructs that take in a set of inputs, and return an output or set of outputs after applying an algorithm, or “recipe” to the set of inputs. The input(s) of a function are often called argument(s). Many functions come programmed into R. For example, consider the sum() function, which takes a numeric vector as an input, and returns the sum of those elements as an output. To see how this works, we’ll first create a toy numeric vector, sample_vector:\n# creates a new numeric vector and assigns it to a new object named \"sample_vector\"\nsample_vector&lt;-c(5, 11, 5.6, 8)\n\n# prints contents of \"sample_vector\"\nsample_vector\n\n[1]  5.0 11.0  5.6  8.0\nNow, we’ll pass sample_vector as an argument to the sum() function. The sum() function takes this argument, applies the algorithm programmed into to it to calculate the sum of vector elements, and returns the sum of the vector elements as the output:\n# calculates sum of vector elements using built-in \"sum\" function\nsum(sample_vector)\n\n[1] 29.6\nAnother example of a built-in function is prod(), which returns the product of vector elements. Below, we pass sample_vector as an argument to this function, and it returns the product of the vector elements:\n# calculates product of vector elements using built-in \"prod\" function\nprod(sample_vector)\n\n[1] 2464\nNow, let’s use the built in mean() function to calculate the mean of the vector elements in sample_vector. We pass sample_vector as an argument to the mean() function, which performs the calculation based on its internal programming, and returns the mean of the vector elements as the output:\n# calculates the mean of vector elements using built-in \"mean\" function\nmean(sample_vector)\n\n[1] 7.4\nLet’s try applying the built-in median() function to sample_vector :\n# calculates the median of vector elements\nmedian(sample_vector)\n\n[1] 6.8\nThus far, we’ve been exploring elementary functions that perform mathematical calculations on numeric vectors. Let’s consider a function that’s relevant for character vectors. The nchar() function takes a string as an argument, and returns the number of characters in that string as the output. Below, we’ll pass the argument “Hello, World!” to nchar(), which returns the number of characters in that argument:\n# calculates the number of characters in a string using built-in \"nchar\" function\nnchar(\"Hello, World!\")\n\n[1] 13\nNow, let’s consider the colnames() function, which is a useful built-in function that takes a data frame as an argument, and returns the names of all of its columns. Below, the argument to the colnames() function is mtcars, which is a dataset that’s built into R (R comes installed with several built-in datasets that are very helpful for practicing new skills and experimenting with code). If you’d like, you can get a sense of the mtcars dataset by passing it to the View() function, or by viewing its documentation with ?mtcars.\n# extracts column names for \"mtcars\" dataset (which is built into R) using the built-in\n# \"ncol\" function\ncolnames(mtcars)\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"\nWe can also extract a data frame’s row names using the built-in rownames() function. Below, we’ll pass mtcars as an argument to rownames():\n## extracts row names for \"mtcars\" dataset\nrownames(mtcars)\n\n [1] \"Mazda RX4\"           \"Mazda RX4 Wag\"       \"Datsun 710\"         \n [4] \"Hornet 4 Drive\"      \"Hornet Sportabout\"   \"Valiant\"            \n [7] \"Duster 360\"          \"Merc 240D\"           \"Merc 230\"           \n[10] \"Merc 280\"            \"Merc 280C\"           \"Merc 450SE\"         \n[13] \"Merc 450SL\"          \"Merc 450SLC\"         \"Cadillac Fleetwood\" \n[16] \"Lincoln Continental\" \"Chrysler Imperial\"   \"Fiat 128\"           \n[19] \"Honda Civic\"         \"Toyota Corolla\"      \"Toyota Corona\"      \n[22] \"Dodge Challenger\"    \"AMC Javelin\"         \"Camaro Z28\"         \n[25] \"Pontiac Firebird\"    \"Fiat X1-9\"           \"Porsche 914-2\"      \n[28] \"Lotus Europa\"        \"Ford Pantera L\"      \"Ferrari Dino\"       \n[31] \"Maserati Bora\"       \"Volvo 142E\"\nR has a large number of useful built-in functions, but we are not limited to these. By drawing on R packages, we can exponentially increase the number of functions at our disposal.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Functional Programming</span>"
    ]
  },
  {
    "objectID": "session2.html#packages",
    "href": "session2.html#packages",
    "title": "3  Functional Programming",
    "section": "3.2 Packages",
    "text": "3.2 Packages\nR packages are essentially pre-written collections of functions organized around a given theme. One of the big advantages of using R is that it has a very large user community among social scientists, statisticians, and digital humanists, who frequently publish R packages. One might think of packages as workbooks of sorts, which contain a well-integrated set of R functions, scripts, data, and documentation; these “workbooks” are designed to facilitate certain tasks or implement useful procedures. These packages are then shared with the broader R user community, and at this point, anyone who needs to accomplish the tasks to which the package addresses itself can use the package in the context of their own projects. The ability to use published packages considerably simplifies the work of applied data research using R; it means that we rarely have to write code entirely from scratch, and can build on the code that others have published in the form of packages. This allows applied researchers to focus on substantive problems, without having to get too bogged down in complicated programming tasks.\nIn this session, we will use various functions from the tidyverse, which is actually a suite of several different packages that implement a variety of data science tasks. When you install and load the tidyverse, we’re simultaneously installing the entire range of these packages. Today the main tidyverse package we’ll use is known as the purrr package, which is a package that contains a variety of functions that facilitate the iterative application of functions to multiple input arguments.\nTo install a package in R, we can use the install.packages() function. In the code block below, the name of the package we want to install (here, the tidyverse suite) is enclosed within quotation marks and placed within parentheses after printing install.packages Running the code below will effectively download the tidyverse suite of packages to our computer:\n\ninstall.packages(\"tidyverse\")\n\nAt this point, the tidyverse suite of packages should be installed on your computers, but the packages are not yet ready for use. Before we can use our packages, we must load them into our environment. We can think of the process of loading installed packages into a current R environment as analogous to opening up an application on your phone or computer after it has been installed (even after an application has been installed, you can’t use it until you open it!). To load (i.e. “open”) an R package, we pass the name of the package we want to load as an argument to the library() function. For example, if we want to load our tidyverse packages into the current environment, we can type:\n\nlibrary(tidyverse)\n\nAt this point, the full suite of the tidyverse suite’s functionality is available for us to use. In the next few sessions, we’ll install and load additional packages, but this is all we need for now.\nOne important thing to note regarding the installation and loading of packages is that we only have to install packages once; after a package is installed, there is usually no need to subsequently reinstall it. However, we must load the packages we need (using the library function) every time we open a new R session. In other words, if we were to close RStudio at this point and open it up later, we would not need to install the tidyverse again, but would need to load the tidyverse within the library() function again.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Functional Programming</span>"
    ]
  },
  {
    "objectID": "session2.html#writing-custom-functions",
    "href": "session2.html#writing-custom-functions",
    "title": "3  Functional Programming",
    "section": "3.3 Writing Custom Functions",
    "text": "3.3 Writing Custom Functions\nAs we mentioned earlier, a function is a programming construct that takes in a set of inputs (also known as arguments), manipulates those inputs/arguments in a specific way (within what’s known as the body of the function), and returns an output that is the product of how those inputs are manipulated in the body of the function. It is much like a recipe, where the recipe’s ingredients are analogous to a function’s inputs, the instructions about how to combine and process those ingredients are analogous to the body of the function, and the end product of the recipe (for example, a cake) is analogous to the function’s output.\nIn the previous section on built-in functions, we specified the functions’ arguments, and noted its outputs; the actual “recipes” were hidden from view. The best way to learn how these under-the-hood “recipes” work is to develop our own. To that end, we’ll now learn how to write some simple functions, and develop some intuition for how they are put together. Writing your own functions can be challenging, so we’ll develop our intuition by starting with a very simple example. In particular, we begin by writing a one-argument function; we then turn to writing a two-argument function; and then consider a multiple (more than two) input function. We’ll also explore writing functions with conditional statements embedded into them, so that they execute differently based on whether or not certain conditions are met.\n\n3.3.1 Writing One-Input Functions\nLet’s say we have a large collection of temperature data, measured in Fahrenheit, and we want to convert these data to Celsius. Recall that the formula to convert from Fahrenheit to Celsius is the following, where “C” represents temperature in Celsius, and “F” represents temperature in Fahrenheit:\n\n# fahrenheit to Celsius formula, where C is Celsius output and F is Fahrenheit input\n(F-32)*(5/9)=C\n\nAs we discussed before, at its most basic level, R is a calculator; if for example, one of our Fahrenheit measurements is 55 degrees; we can convert this to Celsius by plugging 55 into the conversion formula:\n\n# Converts 55 degrees fahrenheit to Celsius\n(55-32)*(5/9)\n\n[1] 12.77778\n\n\nThis is easy enough, but if we have a large amount of temperature data that requires processing, we wouldn’t want to carry out this calculation for each measurement in our data collection. The first step in allowing us to carry out this conversion operation at scale is to write a function. Let’s see how we can wrap the Fahrenheit-Celsius formula above into a function:\n\n# creates fahrenheit to celsius conversion function and assigns it to a new object named \"fahrenheit_to_celsius_converter\"\nfahrenheit_to_celsius_converter&lt;-function(fahrenheit_input){\n  celsius_output&lt;-(fahrenheit_input-32)*5/9\n  return(celsius_output)\n}\n\nLet’s unpack the code above, which we used to create our function:\n\nWe declare that we are creating a new function with the word function; within the parenthesis after function, we specify the function’s argument(s). Here, the function’s argument is an input named fahrenheit_input. The name of the argument(s) is arbitrary, and can be anything you like; ideally, its name should be informed by relevant context. Here, the argument/input to the function is a temperature value expressed in degrees Fahrenheit, so the name “fahrenheit_input” describes the nature of this input.\nAfter enclosing the function’s arguments within parentheses, we print a right-facing curly brace {, and then define the body of the function (i.e. the recipe), which specifies how we want to transform this input. In particular, we takefahrenheit_input, subtract 32, and then multiply by 5/9, which transforms the input to the celsius temperature scale. We’ll tell R to assign this transformed value to a new object within the function, named celsius_output. Objects defined within a function are treated differently than objects defined outside of it; we’ll return to this topic at the end of the session, but this is worth flagging and keeping in mind right now.\nIn the function’s final line, return(celsius_output), we specify the value we want the function to return. Here, we are saying that we want the function to return the value that was assigned to celsius_output. We then close the function by typing a left-facing curly brace below the return statement }.\nJust as we can assign data or visualizations to objects that allow us to subsequently retrieve the outputs of our code, so too with functions. Here, we’ll assign the function we have just written to an object named fahrenheit_to_celsius_converter.\n\nAfter running that code, we can use the newly created fahrenheit_to_celsius() function to perform our Fahrenheit to Celsius transformations. Let’s say we have a Fahrenheit value of 68, and want to transform it to Celsius:\n\n# tests function using an input of 68 degrees fahrenheit\nfahrenheit_to_celsius_converter(fahrenheit_input=68)\n\n[1] 20\n\n\nAbove, we passed the argument fahrenheit_input=68 to the fahrenheit_to_celsius_converter() function that we created; the function then took this value (68), plugged it into “fahrenheit_input” within the function and assigned the resulting value to “celsius_output”; it then returned the value of “celsius_output” (20) back to us. Note that while it’s good practice to label one’s arguments, as we did above (fahrehnheit_input=68), it isn’t strictly necessary. For example, we could just enter a numeric argument for the temperature input, and the function will work:\n\n# uses \"fahrenheit_to_celsius_converter\" function using an input of 20 degrees fahrenheit\nfahrenheit_to_celsius_converter(22)\n\n[1] -5.555556\n\n\nIn short, we can specify any value for the “fahrenheit_input” argument; this value will be substituted for “fahrenheit_input” in the expression celsius_output&lt;-(fahrenheit_input-32)*(5/9), after which the value of celsius_output will be returned to us.\n\n\n3.3.2 Writing Two-Input Functions\nLet’s extend what we learned above by writing a function that takes two arguments, rather than one. The principles are the same. To see this, let’s define a function that takes export and import values as arguments, and returns a value for net exports (defined as the difference between total exports and total imports). Below, we assign this function to an object named net_exports_calculation():\n\n# writes function that takes export and import values as inputs, and returns a value for net exports; function is assigned to a new object named \"net_exports_calculation\"\nnet_exports_calculation&lt;-function(exports, imports){\n  net_export_value&lt;-exports-imports\n  return(net_export_value)\n}\n\nIn essence, the function has two arguments, “exports” and “imports” that are supplied by the user; the body of the function takes these arguments, and subtracts the supplied value of imports from exports, and assigns this result to the object net_export_value, which it then returns as the output. Let’s go ahead and test the function:\n\n# tests the \"net_exports_calculation\" function in a case where exports are 133, and imports are 55\nnet_exports_calculation(exports=133, imports=55)\n\n[1] 78\n\n\nThe function works as expected. Note that if we switch the order in which we supply the arguments, the function continues to work as expected, so long as we label the arguments:\n\n# tests the \"net_exports_calculation\" function in a case where exports are 133, and imports are 55; reverses order in which inputs are supplied\nnet_exports_calculation(imports=55, exports=133)\n\n[1] 78\n\n\nHowever, if the arguments are not labelled, the order in which they are supplied does matter. That is, if the arguments are not labelled, the function assumes that they are passed in the order they’re defined in the function; in this case, that means that the assumption is that the first argument is the import argument and the second is the export argument. So, the following presumes that exports are 55, and imports are 133:\n\n# tests the \"net_exports_calculation\" function in a case where exports are 55, and imports are 133; does not explicitly label inputs, order matters\nnet_exports_calculation(55, 133)\n\n[1] -78\n\n\nAnd the following presumes the opposite, that exports are 133, and imports are 55.\n\n# uses the \"net_exports_calculation\" function in a case where exports are 133, and imports are 55; does not explicitly label inputs, order matters\nnet_exports_calculation(133, 55)\n\n[1] 78\n\n\n\n\n3.3.3 Writing Multiple-Input Functions\nIn this section, we’ll create a function that takes more than two inputs. In particular, we’ll create a function that takes numeric values for consumption spending (consumption_spending), government spending (government_spending), investment spending (investment_spending), and net exports (net_exports) as arguments, and returns a value for GDP (which is the sum of these values). We’ll assign this GDP calculator function to a new object named gdp_calculation:\n\n# creates a new function that takes consumption spending, government spending, investment spending, and net exports as inputs, and returns a value for GDP by summing these elements; function is assigned to a new object named \"gdp_calculation\"\ngdp_calculation&lt;-\n  function(consumption_spending, government_spending, investment_spending, net_exports){\n  gdp&lt;-consumption_spending+government_spending+investment_spending+net_exports\n  return(gdp)\n}\n\nIn short, the function takes numeric data on consumption spending, government spending, investment spending, and net exports as user-supplied arguments; it then takes these values, adds them up, and assigns them to the object gdp, which it returns as output.\nLet’s now test the function; as before, we’ll assume that units are in millions of dollars. We’ll test our function for a country with consumption spending of $125 (consumption_spending=125), government spending of $66 (government_spending=66), investment spending of $36 (investment_spending=36), and net exports of -$33 (net_exports=-33):\n\n# tests gdp calculation for consumption spending of 125, government spending of 66, investment spending of 36, and net exports of -33\ngdp_calculation(consumption_spending = 125, government_spending=66, investment_spending=36, net_exports=-33)\n\n[1] 194\n\n\nAs expected, the function returns the sum of these values, which translates into 194 (interpreted here as a GDP of $194 million).\n\n\n3.3.4 if-then Statements in Functions\nNow that we’re hopefully getting the hang of writing functions with any number of arguments, we can introduce a concept that will allow you to write more complex and sophisticated functions, namely conditional statements. By embedding conditional statements within functions, we enable them to make decisions based on whether a condition is true or false, and execute code accordingly. Conditional statements take the following form:\n\nif (condition1) {\n  # Code to execute if condition1 is TRUE\n} else if (condition2) {\n  # Code to execute if condition1 is FALSE and condition2 is TRUE\n} else {\n  # Code to execute if all the above conditions are FALSE\n}\n\nThe if block is always evaluated first. If the if condition is FALSE, the program moves to the else if block (there can be multiple such blocks). If none of the if or else if conditions are met, and all specified conditions are false, the else block (which is optional) executes.\nLet’s take an example; below, we’ll create a function that takes two arguments, “value”, and “unit”. The “value” argument is a numeric temperature value, while “unit” is a string that specifies whether “value” is in Celsius or Fahrenheit. If the input temperature value is in Fahrenheit, the function coverts it to Celsius and returns this value; if the input value is not in Fahrenheit (i.e. is in Celsius), the function converts the input to Fahrenheit, and returns this value; and finally, if the specified input temperature is in neither Celsius nor Fahrenheit, the function returns a message saying “Please indicate whether your input is in Celsius or Fahrenheit”:\n\n# creates a function that takes a temperature value (\"value\"), and a temperature scale label (\"unit\") that is either \"Fahrenheit\" or \"Celsius\" which designates the temperature scale of the input temperature value; if the input argument is in \"Fahrenheit\", the function converts the temperature to Celsius and returns this value; if the input is in \"Celsius\" the function converts the temperature to Fahrenheit and returns this value; if the the temperature scale label is neither \"Fahrenheit\" nor \"Celsius\" an error message is returned to the user; the function is assigned to a new object named \"convert_temperature\"\nconvert_temperature &lt;- function(value, unit) {\n  if (unit == \"Fahrenheit\") {\n    # Convert Fahrenheit to Celsius\n    celsius &lt;- (value - 32) * 5 / 9\n    return(celsius)\n  } else if (unit == \"Celsius\") {\n    # Convert Celsius to Fahrenheit\n    fahrenheit &lt;- (value * 9 / 5) + 32\n    return(fahrenheit)\n  } else {\n    # Handle invalid input for the unit\n    return(\"Please indicate whether your input is in Celsius or Fahrenheit\")\n  }\n}\n\nLet’s go ahead and test the function. Let’s say we want to convert 100 degrees Fahrenheit to Celsius:\n\n# Converts 100 degrees Fahrenheit to Celsius\nconvert_temperature(100, \"Fahrenheit\")\n\n[1] 37.77778\n\n\nOr, say we have Celsius values, and want to convert 25 degrees Celsius to Fahrenheit\n\n# Converts 25 degrees Celsius to Fahrenheit\nconvert_temperature(25, \"Celsius\")\n\n[1] 77\n\n\nLet’s try inputting a temperature in Kelvin:\n\n# Attempts to convert 100 degrees Kelvin to another unit; met with a message specifying the function's constraints\nconvert_temperature(100, \"Kelvin\")\n\n[1] \"Please indicate whether your input is in Celsius or Fahrenheit\"\n\n\nAs expected, the function returns a message saying this is beyond its scope.\nAs you can see, using if-then statements in a function allows functions to be flexible and dynamic, which can save time; instead of writing separate functions to convert Celsius to Fahrenheit and vice-versa, we can write a function that implements the conversion in either direction depending on the temperature value the user supplies.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Functional Programming</span>"
    ]
  },
  {
    "objectID": "session2.html#iteration",
    "href": "session2.html#iteration",
    "title": "3  Functional Programming",
    "section": "3.4 Iteration",
    "text": "3.4 Iteration\nNow that we have a sense of how to write basic functions, let’s now turn to the concept of iteration, which is fundamentally about applying a function across the elements of a vector, list, or data frame in a programmatic way. Functions and iteration are thus closely related; functions are small programs that perform some action, while iteration applies those programs repeatedly across several objects. For example, we already have a function to convert Fahrenheit temperature values to Celsius temperature values; using this newly created function helps us to avoid manually converting each of our temperature values from the Fahrenheit scale to the Celsius scale. Instead of repeating the calculation over and over manually, we could simply plug our Fahrenheit temperature values into the function, and let the function carry out the calculation for us. However, it is still time-consuming to plug our Fahrenheit values into the function one-by-one. Instead, we could deposit our Fahrenheit temperature values into a vector, and iteratively (i.e. sequentially) apply our function to all of these vector elements, and deposit the transformed results into a new vector (or a list, or as the rows of a data frame).\nIn programming languages, functions are typically applied to multiple inputs in an iterative fashion using a construct known as a for-loop, which some of you may already be familiar with. R users also frequently use specialized functions (instead of for-loops) to iterate over elements; this is often faster, or at the very least, makes R scripts more readable. One family of these iterative functions is the “Apply” family of functions. A more recent set of functions that facilitate iteration is part of the tidyverse, and is found within the purrr package. These functions are known as map() functions, and we will use them in this lesson to iteratively apply our functions to multiple inputs arguments in a repeated fashion.\nThere are many different kinds of map() functions within the purrr package, and we’ll introduce specific functions from this family of functions as we go. However, two of the fundamental map functions to be aware of at the outset are map(), which iterates over the elements of a vector or list, and deposits the results in a list, and map_dbl(), which iterates over the elements of a vector or list, and deposits the results in a numeric vector. If you’d like a preview of map() functions before we dive in, please consult the function’s documentation: ?map().\n\n3.4.1 Iteration with a Single-Input Function\nLet’s say we have four different Fahrenheit temperature values that we want to convert to Celsius: 45.6, 95.9, 67.8, 43. We could pass each input as an argument to fahrenheit_to_celsius_converter() individually, and get our Fahrenheit values that way, but it would quickly become tedious. Instead, we’ll implement a strategy that involves iteratively applying our function to those Fahrenheit temperature values. As a first step, we’ll create a vector of Fahrenheit temperature input arguments:\n\n# creates a vector of fahrenheit inputs\nfahrenheit_input_vector&lt;-c(45.6, 95.9, 67.8, 43)\n\nNow, we’ll use the map() function to iteratively apply fahrenheit_to_celsius_converter() to each element in that vector, and deposit the results in a list. We’ll passfahrenheit_input_vector (i.e. the elements we want to iterate over) as the first argument to the map() function, and fahrenheit_to_celsius_converter() (i.e. the function we want to apply iteratively to the elements in thefahrenheit_input_vector) as the second argument. The result of this operation will be a new “results list”, containing the transformed temperature values for each input in the original vector of Fahrenheit values (fahrenheit_input_vector). We’ll assign this result/output list to a new object namedcelsius_outputs_list:\n\n# iteratively applies the \"fahrenheit_to_celsius_converter\" function to the vector of input arguments, \"fahrenheit_input_vector\", and assigns the resulting list of outputs to \"celsius_outputs_vector\"\ncelsius_outputs_list&lt;-map(.x=fahrenheit_input_vector, .f=fahrenheit_to_celsius_converter)\n\nIn short, the code above takes fahrenheit_input_vector and runs each of these numbers through the fahrenheit_to_celsius_converter() function, and then sequentially deposits the transformed result to the newly created celsius_outputs_list object, which contains the transformed Celsius values:\n\n# prints contents of \"celsius_outputs_list\"\ncelsius_outputs_list\n\n[[1]]\n[1] 7.555556\n\n[[2]]\n[1] 35.5\n\n[[3]]\n[1] 19.88889\n\n[[4]]\n[1] 6.111111\n\n\nMore explicitly, the code that reads celsius_outputs_list&lt;-map(fahrenheit_input_vector, fahrenheit_converter)did the following:\n\nPass 45.6 (the first element in the input vector, fahrenheit_input_vector) to the fahrenheit_to_celsius_converter() function, and place the output (7.555556) as the first element in a new list of transformed values, named celsius_outputs_list.\nPass 95.9 (the second element in the input vector, fahrenheit_input_vector) to the fahrenheit_to_celsius_converter() function, and deposit the output (35.500000) as the second element in celsius_outputs_list.\nPass 67.8 (the third element in the input vector, fahrenheit_input_vector) to the fahrenheit_to_celsius_converter() function, and deposit the output (19.888889) as the third element in celsius_outputs_list.\nPass 43 (the fourth element in the input vector, fahrenheit_input_vector) to the fahrenheit_to_celsius_converter() function, and deposit the output (6.111111) as the fourth element in celsius_outputs_list.\n\nRecall that if we want to extract an element from a list, we can do so by specifying its index within double brackets. For instance, if we wanted to extract the second element in celsius_outputs_list, we could type the following:\n\n# extracts second element from \"celsius_outputs_list\"\ncelsius_outputs_list[[2]]\n\n[1] 35.5\n\n\nAs we have noted, there are a variety of map() functions, and the precise one you should use turns on the number of arguments used by the function (here, this value is of course one), and the desired class of the output (i.e. list, numeric vector etc.). Here, we used the core map() function because we wanted a list as an output, and we have a one-argument function that we are applying. Below, we’ll talk more about how to handle functions with multiple arguments within the purrr ecosystem. Before that, though, let’s see how to use a slightly different type of map() function to return a different kind of output.\nIn particular, let’s say we want to iteratively apply the values in fahrenheit_input_vector as arguments to the fahrenheit_to_celsius_converter() but that we want the outputs to be deposited in a numeric vector, rather than a list (as above). To do so, we can pass the same arguments we passed to the map() function, but use the map_dbl() function instead, which will return a vector:\n\n# iteratively applies the \"fahrenheit_to_celsius_converter\" function to the vector of input arguments, \"fahrenheit_input_vector\", and assigns the resulting vector of outputs to \"celsius_outputs_vector\"\ncelsius_outputs_vector&lt;-map_dbl(.x=fahrenheit_input_vector, .f=fahrenheit_to_celsius_converter)\n\nIn short, the code above takes the first element of fahrenheit_input_vector, passes it as an input argument to fahrenheit_to_celsius_converter(), and deposits the output Celsius value as the first element in celsius_outputs_vector; it then takes the second element of fahrenheit_input_vector, passes it as an input argument to fahrenheit_to_celsius_converter(), and deposits the output Celsius value as the second element in celsius_outputs_vector ; and so on. Let’s print the contents of celsius_outputs_vector:\n\n# prints contents of \"celsius_outputs_vector\"\ncelsius_outputs_vector\n\n[1]  7.555556 35.500000 19.888889  6.111111\n\n\nAs expected, we see that it is a vector containing the output Celsius values generated by applying the function to the various Fahrenheit input arguments.\nWhat if we want a data frame that contains the input Fahrenheit values as one column, and the output Celsius columns as another, instead of a list or vector of outputs? We can do so by using the map_dbl() function in conjunction with the arguments above within the data.frame() function that can define a data frame. In particular:\n\n# creates a data frame in which one column contains Fahrenheit input values, and the other contains Celsius output values\nfahrenheit_celsius_df_output&lt;-data.frame(Fahrenheit=fahrenheit_input_vector,\n                                         Celsius=map_dbl(.x=fahrenheit_input_vector, .f=fahrenheit_to_celsius_converter))\n\nLet’s confirm that the data frame has been created as expected:\n\n# prints contents of \"fahrenheit_celsius_df_output\"\nfahrenheit_celsius_df_output\n\n  Fahrenheit   Celsius\n1       45.6  7.555556\n2       95.9 35.500000\n3       67.8 19.888889\n4       43.0  6.111111\n\n\nAs you can see, we now have a handy data frame that has a column of Fahrenheit inputs, and a column of Celsius outputs.\n\n\n3.4.2 Iteration with a Double-Input Function\nIn the previous subsection, we explored map() function in the context of working with single argument functions. In this section, we’ll explore how related functions from the purrr package can be used to iteratively pass arguments to a function with two input arguments. To illustrate, we will consider the net_exports_calculation() function we created above.\nLet’s say we have export and import data from three countries, and want to calculate net exports for each country. First, we’ll deposit our input arguments into two different vectors. The numeric vector export_vector contains information for export values, while import_vector contains information on import values:\n\n# creates export and import vectors\nexport_vector&lt;-c(78, 499, 785)\nimport_vector&lt;-c(134, 345, 645)\n\nNow, we’ll use the map2() function to iteratively pass the input arguments from these two vectors to the net_exports_calculation() function, and deposit the outputs (i.e. net export values) into a list, which we’ll assign to an object named net_export_list. The “.x” label signifies that export_vector is the first argument for the net_exports_calculation() function to iterate over, while the “.y” label signifies that import_vector is the second argument for net_exports_calculation() to iterate over. The “.f” label signifies the name of the function to which we’re applying these arguments.\n\n# iteratively applies the \"net_exports_calculation\" function to the export values contained in \"export_vector\" and the import values contained in \"import_vector\" and deposits the resulting outputs in a list that's assigned to the new object entitled \"net_export_list\"\nnet_export_list&lt;-map2(.x=export_vector, .y=import_vector, .f=net_exports_calculation)\n\nIn short, the code above takes the first value in export_vector and the first value in import_vector and passes these values to net_exports_calculation to calculate net exports for the first country, which is then deposited as the first element in net_export_list; then, it takes the second value in export_vector and the second value in import_vector and passes these values to net_exports_calculation to calculate net exports for the second country, which is then deposited as the second element in net_export_list; and likewise for the third country. We can print the contents of net_export_list to ensure that the code worked as expected:\n\n# prints contents of \"net_export_list\"\nnet_export_list\n\n[[1]]\n[1] -56\n\n[[2]]\n[1] 154\n\n[[3]]\n[1] 140\n\n\nIf, instead of depositing the results into a list, we’d like to deposit our outputs into a numeric vector, we can do so using themap2_dbl() function, the analog of map_dbl() which is used when the function takes two input arguments rather than one. We’ll assign our results vector to a new object named net_export_vector:\n\n# iteratively applies the \"net_exports_calculation\" function to the export values contained in \"export_vector\" and the import values contained in \"import_vector\" and deposits the resulting outputs in a vector that's assigned to the new object entitled \"net_export_vector\"\nnet_export_vector&lt;-map2_dbl(.x=export_vector, .y=import_vector, .f=net_exports_calculation)\n\nLet’s print the contents of net_export_vector:\n\n# prints contents of \"net_export_vector\"\nnet_export_vector\n\n[1] -56 154 140\n\n\nIf, instead, we’d like a data frame that contains exports in the first column, imports in the second column, and net exports in the third, we could use the data.frame() function, and run the code that generated net_export_vector within it. We’ll assign this data frame to a new object named net_exports_dataframe:\n\n# creates data frame with exports in first column, imports in second column, and net exports in third; assigns the data frame to a new object named \"net_exports_dataframe\"\nnet_exports_dataframe&lt;-data.frame(exports=export_vector,\n                                 imports=import_vector,\n      net_exports=map2_dbl(.x=export_vector, .y=import_vector, .f=net_exports_calculation))\n\nOf course, we could have also created the data frame above with the following:\n\n# alternative way of creating \"net_exports_dataframe\"\ndata.frame(exports=export_vector,\n           imports=import_vector,\n           net_exports=net_export_vector)\n\n  exports imports net_exports\n1      78     134         -56\n2     499     345         154\n3     785     645         140\n\n\n\n\n3.4.3 Iteration with a Multiple-Input Function\nWhile the map2() family functions allows us to conveniently handle iteration tasks involving two-argument functions, we will often need to write and work with functions with more than two arguments. How can we carry out iteration tasks when we need to iteratively pass multiple input arguments to a function?\nThe pmap() family of functions within purrr allows us to handle iteration tasks using functions with any number of inputs greater than two, by using a list as a container for all of the input arguments we would like to iteratively pass to a functions To see how this works, let’s consider the gdp_calculator() function that we created above. Let’s say we have consumption spending, government spending, investment spending, and net export data for four different countries, and we want to iteratively pass the data for these countries as arguments to gdp_calculator() and derive the GDP for each country.\nThe first step is to create a new list of input arguments, where each list element is a vector that contains the country-level values for each argument of the gdp_calculation() function. We’ll assign this list to a new object named gdp_input_list:\n\n# creates a list as a container for the input arguments we'll iteratively run through the \"gdp_calculation\" function\ngdp_input_list&lt;-list(consumption_spending=c(44, 89, 64, 33),\n                     government_spending=c(54, 76, 222, 110),\n                     investment_spending=c(123, 200, 55, 45),\n                     net_exports=c(-55, 89, 143,-12))\n\nTo make sure we understand what gdp_input_list represents, consider the first element in each of the four numeric vectors in the list; these first elements correspond to the first country, which we can see has consumption spending of $44, government spending of $54, investment spending of $123, and net exports of -$55. The second element of each of the vectors in the list corresponds to information for the second country, which has consumption spending of $89, government spending of $76, investment spending of $200, and net exports of $89. And so on for Countries 3 and 4.\nNow that we have defined our list of input values (gdp_input_list) based on the arguments to the gdp_calculation() function, we can pass gdp_input_list (the list of input values) and gdp_calculation() (the function to which we’re iteratively passing the arguments in gdp_input_list) as arguments to purrr’s pmap() function. The pmap() function iteratively passes the arguments in the input list to the gdp_calculation() function in a vectorized fashion. That is, the pmap() function uses the first element in each vector of the input list to generate the first output value, then uses the second element in each vector of the input list to generate the second output value, and so on. We’ll assign the resulting list of output values to a new object named gdp_output_list. The “.l” label is used to designate the list of input arguments, while the “.f” argument designates the function to which we are iteratively passing arguments from the input list:\n\n# iteratively passes arguments from \"gdp_input_list\" to the \"gdp_calculation\" function and deposits the results in a new list object named \"gdp_output_list\"\ngdp_output_list&lt;-pmap(.l=gdp_input_list, .f=gdp_calculation)\n\nLet’s now print the contents of gdp_output_list:\n\n# prints contents of \"gdp_output_list\"\ngdp_output_list\n\n[[1]]\n[1] 166\n\n[[2]]\n[1] 454\n\n[[3]]\n[1] 484\n\n[[4]]\n[1] 176\n\n\nAs expected, the first list element contains the GDP of the first country, 166 (44+54+123+55); the second list element contains the GDP of the second country, 454 (89+76+200+89); and so on, for the third and fourth countries.\nIf, instead, we want the results deposited in a vector, we can use the pmap_dbl() function instead:\n\n# iteratively passes arguments from \"gdp_input_list\" to the \"gdp_calculation\" function and deposits the results in a new list object named \"gdp_output_vector\"\ngdp_output_vector&lt;-pmap_dbl(.l=gdp_input_list, .f=gdp_calculation)\n\nLet’s print the contents of gdp_output_vector and confirm that it contains the expected outputs of the GDP function:\n\n# prints contents of \"gdp_output_vector\"\ngdp_output_vector\n\n[1] 166 454 484 176\n\n\nAs an exercise below, we’ll ask you to assemble a data frame in which consumption spending, government spending, investment spending, and net exports for these countries are in columns, along with another column that contains the GDP value.\n\n\n3.4.4 Iteration with more complex functions\nNow, let’s see how we can iteratively apply a more complex function with multiple inputs and conditional logic that results in different outputs depending on whether certain conditions are met. We’ll slightly modify the convert_temperature() function we created above. In particular, this modified function will take three inputs; the first specifies the name of a country, the second specifies a temperature in either Celsius or Fahrenheit, and the third provides information on whether the temperature value is provided in Celsius or Fahrenheit.\nIf the temperature is provided in Fahrenheit, the function converts this value to Celsius, while also recording the temperature in Fahrenheit based on the input value. If the temperature is provided in Celsius, it converts Celsius to Fahrenheit, while also recording the temperature in Celsius based on the input value. Then, it uses this information to create a one-row data frame, where the columns are the Country, temperature in Celsius, and temperature in Fahrenheit. The function below is extensively commented; see if you can make sense of its logic.\n\n# creates new function to take a country name, temperature value in either Celsius or Fahrenheit, and a designation for the temperature unit as inputs, and return a data frame with the country name, temperature value in Fahrenheit, and Temperature value in Celsius as columns; the function is assigned to a new object named \"convert_temperature_df\"\nconvert_temperature_df &lt;- function(country, temperature, unit) {\n  # Check if the unit is valid\n  if (unit == \"Fahrenheit\") {\n    # Convert Fahrenheit to Celsius\n    celsius &lt;- (temperature - 32) * 5 / 9\n    fahrenheit &lt;- temperature\n  } else if (unit == \"Celsius\") {\n    # Convert Celsius to Fahrenheit\n    fahrenheit &lt;- (temperature * 9 / 5) + 32\n    celsius &lt;- temperature\n  } else {\n    # Throw an error if the unit is invalid\n    stop(\"Error: Please indicate whether your input is in 'Celsius' or 'Fahrenheit'\")\n  }\n  \n  # Create and return a data frame\n  result &lt;- data.frame(\n    Country = country,\n    Temperature_Celsius = round(celsius, 2),   # Round to 2 decimal places\n    Temperature_Fahrenheit = round(fahrenheit, 2)\n  )\n  \n  return(result)\n}\n\nNow, let’s go ahead and test this function, where the country is “USA”, and the temperature in Fahrenheit is 100:\n\n# tests \"convert_temperature_df\" function for USA as the country input, and a temperature of 100 degrees in Fahrenheit\nconvert_temperature_df(\"USA\", 100, \"Fahrenheit\")\n\n  Country Temperature_Celsius Temperature_Fahrenheit\n1     USA               37.78                    100\n\n\nAs we can see, the function behaved as expected; it creates a data frame where the country is “USA”, and there are columns for the temperature in Celsius and Fahrenheit. In this case, the Fahrenheit temperature was filled in by the user-supplied argument, while the Celsius temperature was filled in by transforming the Fahrenheit temperature value to the Celsius scale within the function.\nLet’s test the function again, with different input arguments:\n\n# tests \"convert_temperature_df\" function for India as the country input, and a temperature of 100 degrees in Fahrenheit\nconvert_temperature_df(\"India\", 39, \"Celsius\")\n\n  Country Temperature_Celsius Temperature_Fahrenheit\n1   India                  39                  102.2\n\n\nAgain, the function behaves as expected. It creates a data frame where the country is “India”, and columns for the temperature in Celsius and Fahrenheit. In this case, the Celsius temperature was filled in by the user-supplied argument, while the Fahrenheit temperature was filled in by transforming the Celsius temperature value to the Fahrenheit scale within the function.\nNow, let’s imagine we have data for several countries, and we want to iteratively pass this data as arguments to convert_temperature_df to generate a data frame with information on the temperatures for these countries. To do so, we can use the pmap() function. First, we’ll create a list with vectors that contain the input arguments we want to pass to the function; we’ll assign this list to a new object named input_list_temperatures:\n\n# creates a list of inputs to iterate over\ninput_list_temperatures&lt;-list(country=c(\"USA\", \"Canada\", \"Mexico\", \"France\"),\n                              temperature=c(66, 11, 25, 33),\n                              unit=c(\"Fahrenheit\", \"Celsius\", \"Fahrenheit\", \"Celsius\"))\n\nNext, we’ll pass this list and the convert_temperature_df() function as arguments to pmap(), and assign the resulting list of outputs to a new object named convert_temperature_list.\n\n# iteratively applies the \"convert_temperature_df\" function using the input variables in \"input_list_temperatures\"; the outputs are deposited in a list assigned to the object named \"convert_temperature_list\"\nconvert_temperature_list&lt;-pmap(.l=input_list_temperatures, .f=convert_temperature_df)\n\nThe code above first takes the first elements in the vectors in input_list_temperatures (“USA, 66,”Fahrenheit”), runs them through the convert_temperature_df() function, and deposits the resulting data frame as the first element in convert_temperature_list. It then takes the second elements in the vectors in input_list_temperatures (“Canada”, 11, “Celsius”), passes them as arguments to the convert_temperature_df() function, and deposits the resulting data frame as the second element in convert_temperature_list. And so on.\nLet’s now print the contents of convert_temperature_list , which should contain four single-row data frames:\n\n# prints contents of \"convert_temperature_list\"\nconvert_temperature_list\n\n[[1]]\n  Country Temperature_Celsius Temperature_Fahrenheit\n1     USA               18.89                     66\n\n[[2]]\n  Country Temperature_Celsius Temperature_Fahrenheit\n1  Canada                  11                   51.8\n\n[[3]]\n  Country Temperature_Celsius Temperature_Fahrenheit\n1  Mexico               -3.89                     25\n\n[[4]]\n  Country Temperature_Celsius Temperature_Fahrenheit\n1  France                  33                   91.4\n\n\nAs we can see, the data frames are stored separately as list elements (which is what we expected). If we’d like to bind these data frame rows together into a single, consolidated data frame, we can easily do so by passing convert_temperature_list as an argument to the bind_rows() function from the dplyr package. We’ll assign this data frame to a new object named convert_temperature_df_final:\n\n# appends together the single-row data frames in \"convert_temperature_list\" into a single data frame by passing \"convert_temperature_list\" as an argument to \"bind_rows\"; the newly created data frame is assigned to a new object named \"convert_temperature_df_final\"\nconvert_temperature_df_final&lt;-bind_rows(convert_temperature_list)\n\n\n# prints contents of \"convert_temperature_df_final\"\nconvert_temperature_df_final\n\n  Country Temperature_Celsius Temperature_Fahrenheit\n1     USA               18.89                   66.0\n2  Canada               11.00                   51.8\n3  Mexico               -3.89                   25.0\n4  France               33.00                   91.4\n\n\nFinally, it’s worth noting that it’s possible to incorporate iteration processes with map() family functions within our custom-written functions. In other words, we can include map() functions within the body of our functions, rather than simply using them on pre-defined functions. Moreover, its possible to incorporate functions we’ve already written into new custom functions; incorporating “functions within functions” can often help us accomplish some very useful tasks.\nLet’s consider an example, by writing a new function that takes takes a vector of Fahrenheit temperature values and transforms these values to the Celsius scale. It will return these transformed values either as a list, vector, or data frame (containing the initial Fahrenheit temperatures as one column. and the transformed Celsius temperatures in another), depending on the user’s preference\nBelow, the function’s first argument is the vector of Fahrenheit temperatures, while the second is the user’s preference over whether the transformed values are returned as a list (“List), vector (”Vector”), or data frame (“Data.Frame”).\n\nIf the user desires the output as a list, the function passes the vector of Fahrenheit inputs as an argument to the map() function, along with the fahrenheit_to_celsius_converter() that we defined earlier. This will iteratively pass the temperature values in the input vector as arguments to fahrenheit_to_celsius_converter, and the output Celsius temperatures are returned as a list.\nIf, instead, the user desires the output as a numeric vector, the function passes the the vector of Fahrenheit inputs as an argument to the map_dbl() function, along with the fahrenheit_to_celsius_converter(). This will iteratively pass the temperature values in the input vector as arguments to fahrenheit_to_celsius_converter, and the output Celsius temperatures are returned as a vector (given the behavior of the map_dbl() function).\nIf the user desires a data frame, the function will create a data frame using the data.frame() function, and define a column for Fahrenheit values using the vector of inputs, and a column of Celsius temperature values using the vector of transformed Celsius values created by map_dbl(.x=vector_of_fahrenheit_inputs, .f =fahrenheit_to_celsius_converter). We’ll assign this function to a new object named fahrenheit_to_celsius_general():\nFinally, If the user specifies a an output that is not “List”, “Data.Frame”, or “Vector”, the function throws an error.\n\n\n# Writes a function that takes a vector of fahrenheit temperature values, and returns either a list, data frame, or vector of outputs depending on the user's desired output; assigns the function to a new object named \"fahrenheit_to_celsius_general\"\nfahrenheit_to_celsius_general&lt;-function(vector_of_fahrenheit_inputs, desired_output){\n   if (desired_output == \"List\") {\n     outputlist&lt;-map(.x=vector_of_fahrenheit_inputs, .f=fahrenheit_to_celsius_converter)\n     return(outputlist)\n   } else if (desired_output==\"Vector\"){\n     outputvector&lt;-map_dbl(.x=vector_of_fahrenheit_inputs, .f =fahrenheit_to_celsius_converter)\n     return(outputvector)\n   } else if (desired_output==\"Data.Frame\"){\n     outputdf&lt;-data.frame(Fahrenheit=vector_of_fahrenheit_inputs,\n                          Celsius=map_dbl(.x=vector_of_fahrenheit_inputs, .f =fahrenheit_to_celsius_converter))\n     return(outputdf)\n   } else {\n      stop(\"Error: Please indicate whether your desired output is a 'Vector', 'Data.Frame', or 'List'\")\n   }\n}\n\nNow, let’s test this function out. First, we’ll define a vector of Fahrenheit values we’d like to convert, and assign it to a new object named test_vector_ftoc:\n\n# tests \"fahrenheit_to_celsius_general\" function; first, defines a vector of fahrenheit values\ntest_vector_ftoc&lt;-c(18, 66, 88, -12, 7)\n\nNow let’s test the function by passing test_vector_ftoc as an argument to it, along with specifying “Data.Frame” as our desired output.\n\n# uses \"fahrenheit_to_celsius_general\" function to convert the temperature values in \"test_vector_ftoc\" to Celsius and return a data frame with input Fahrenheit values in one column, and corresponding celsius temperatures in another column\nfahrenheit_to_celsius_general(vector_of_fahrenheit_inputs=test_vector_ftoc, desired_output=\"Data.Frame\")\n\n  Fahrenheit    Celsius\n1         18  -7.777778\n2         66  18.888889\n3         88  31.111111\n4        -12 -24.444444\n5          7 -13.888889\n\n\nThe function behaves as expected. Now, let’s try specifying that we want the transformed Celsius temperatures as a list:\n\n# uses \"fahrenheit_to_celsius_general\" function to convert the temperature values in \"test_vector_ftoc\" to Celsius and return the outputs as a list\nfahrenheit_to_celsius_general(vector_of_fahrenheit_inputs=test_vector_ftoc, desired_output=\"List\")\n\n[[1]]\n[1] -7.777778\n\n[[2]]\n[1] 18.88889\n\n[[3]]\n[1] 31.11111\n\n[[4]]\n[1] -24.44444\n\n[[5]]\n[1] -13.88889\n\n\nFinally, we’ll check the function’s behavior when we request the output as a vector:\n\n# uses \"fahrenheit_to_celsius_general\" function to convert the temperature values in \"test_vector_ftoc\" to Celsius and return the outputs as a vector\nfahrenheit_to_celsius_general(vector_of_fahrenheit_inputs=test_vector_ftoc, desired_output=\"Vector\")\n\n[1]  -7.777778  18.888889  31.111111 -24.444444 -13.888889\n\n\nIt’s worth noting that when we request an output that is not supported, we receive the expected error message. For example, let’s specify our desired output as a tibble (i.e. a special type of data frame):\n\n# uses \"fahrenheit_to_celsius_general\" function to convert the temperature values in \"test_vector_ftoc\" to Celsius and return the outputs as a tibble\nfahrenheit_to_celsius_general(vector_of_fahrenheit_inputs=test_vector_ftoc, desired_output=\"Tibble\")\n\nError in fahrenheit_to_celsius_general(vector_of_fahrenheit_inputs = test_vector_ftoc, : Error: Please indicate whether your desired output is a 'Vector', 'Data.Frame', or 'List'",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Functional Programming</span>"
    ]
  },
  {
    "objectID": "session2.html#global-and-local-environments",
    "href": "session2.html#global-and-local-environments",
    "title": "3  Functional Programming",
    "section": "3.5 Global and Local Environments",
    "text": "3.5 Global and Local Environments\nNow that we know a little bit more about how functions are put together, it is worth briefly discussing global and local environments in R. The global environment is the environment where the objects we define are created and stored during an R Session. A local environment is a temporary environment created within functions. When objects are defined within a function, those objects only exist within that function, and won’t be accessible globally (unless they’re explicitly assigned to the global environment).\nTo get a better sense of this, let’s first define an object, x in our global environment:\n\n# define a variable in the global environment\nx&lt;-24\n\nNow, we’ll create a toy function that defines another value for x within its environment.\n\n# creates a toy function that takes a numeric input argument (\"input1\"); it defines an object, x, within the function, then defines a function, z, that's the sum of x and input1. It returns Z as an output\ntoy_function&lt;-function(input1){\n  x&lt;-5\n  z&lt;-x+input1\n  return(z)\n}\n\nGo ahead and test the function to ensure it works as expected.\n\n# passes the argument \"input1=7\" to the toy function\ntoy_function(input1=7)\n\n[1] 12\n\n\nIn this context, the key thing to note is that even though we defined x&lt;-5 within the function, when we print the value of x, it returns 24, which was the value assigned in the global environment. The local object x, assigned a value of 5, only exists when the function runs; then it disappears.\n\n# prints value of x; note it returns the value from the global environment\nx\n\n[1] 24\n\n\nNote, also that when we try to print out the value of z, we are met with an error, since it’s only defined within the local environment of the function; z is not an object in the global environment and does not exist in the context of this environment. Rather, it is created in the function’s local environment and disappears after the function finishes running.\n\n# prints value of z; note that there's an error, since z is only defined within the local environment of the function\nz\n\nError: object 'z' not found\n\n\nAnother way of noting this is to call the ls() function, and see that “z” is not printed to the console along with other objects in the global environment, since it’s only defined within the toy_function().\n\n# prints objects in memory; note that z is not included, since it's only defined within the function\nls()\n\n [1] \"celsius_outputs_list\"            \"celsius_outputs_vector\"         \n [3] \"convert_temperature\"             \"convert_temperature_df\"         \n [5] \"convert_temperature_df_final\"    \"convert_temperature_list\"       \n [7] \"export_vector\"                   \"fahrenheit_celsius_df_output\"   \n [9] \"fahrenheit_input_vector\"         \"fahrenheit_to_celsius_converter\"\n[11] \"fahrenheit_to_celsius_general\"   \"gdp_calculation\"                \n[13] \"gdp_input_list\"                  \"gdp_output_list\"                \n[15] \"gdp_output_vector\"               \"import_vector\"                  \n[17] \"input_list_temperatures\"         \"net_export_list\"                \n[19] \"net_export_vector\"               \"net_exports_calculation\"        \n[21] \"net_exports_dataframe\"           \"sample_vector\"                  \n[23] \"test_vector_ftoc\"                \"toy_function\"                   \n[25] \"x\"                              \n\n\nAn important implication of the fact that the local environment within a function exists apart from the global environment is that when writing functions, you don’t have to worry about accidentally overwriting global objects.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Functional Programming</span>"
    ]
  },
  {
    "objectID": "session2.html#end-of-lesson-exercises",
    "href": "session2.html#end-of-lesson-exercises",
    "title": "3  Functional Programming",
    "section": "3.6 End-of-Lesson Exercises",
    "text": "3.6 End-of-Lesson Exercises\nExercise 1\nWrite a function that takes a monetary value (in US dollars) as an input, and returns the equivalent value in Euros. Assign the function to an object, and test it out with some sample arguments.\n\n\nSuggested Solution to Exercise 1\n\n\n# creates a US Dollar (usd) to Euro (eur) conversion function based on current Dollar to Euro exchange rate\nusd_to_eur&lt;-function(dollar_input){\n  dollar_to_euro_conversion&lt;-dollar_input*0.9637\n  return(dollar_to_euro_conversion)\n}\n\n# Uses function to convert $18.23 to Euros\nusd_to_eur(18.23)\n\n[1] 17.56825\n\n# Uses function to convert $127.00 to Euros\nusd_to_eur(127)\n\n[1] 122.3899\n\n\n\nExercise 2\nWrite a function that takes a monetary value (in US Dollars) as an input, as well as an argument in which the user can tell the function to convert that value to an equivalent amount in Euros, Indian Rupees, or Mexican Pesos. The function returns the US dollar equivalent in the desired currency. Assign this function to a new object.\n\n\nSuggested Solution to Exercise 2\n\n\n# creates new function, \"exchange_rate_calculator\", that converts USD amount to Euros (EUR), Indian Rupees (INR), or Pesos (MXN); if the desired currency argument is not either \"EUR\", \"INR\", or \"MXN\" (i.e. the currency tickers), the function throws an error\nexchange_rate_calculator&lt;-function(USD_currency_value, desired_currency){\n  if (desired_currency==\"EUR\"){\n    euros&lt;-USD_currency_value*0.96\n    return(euros)\n  } else if (desired_currency==\"INR\"){\n    inr&lt;-USD_currency_value*87.58\n    return(inr)\n  } else if (desired_currency==\"MXN\"){\n    mxn&lt;-USD_currency_value*20.48\n    return(mxn)\n  } else{\n    stop(\"Please indicate whether you'd like to convert this value to EUR, INR, or MXN\")\n  }\n}\n\n# tests \"exchange_rate_calculator\" by converting $25 to INR\nexchange_rate_calculator(25, \"INR\")\n\n[1] 2189.5\n\n# uses \"exchange_rate_calculator\" to convert $25 to EUR\nexchange_rate_calculator(25, \"EUR\")\n\n[1] 24\n\n# uses \"exchange_rate_calculator\" to convert $25 to MXN\nexchange_rate_calculator(25, \"MXN\")\n\n[1] 512\n\n\n\nExercise 3\nTake the function you wrote for Question 1 above, and use a function from the purrr package to programmatically generate a data frame where one column contains US dollars in the following amounts: 10.25, 1245.55, 83, 76, 11559, and the other column contains the equivalent sum of money in Euros.\n\n\nSuggested Solution to Exercise 3\n\n\n# create vector of USD currency values to convert\nusd_vector&lt;-c(10.25, 1245.55, 83, 76, 11559)\n\n# create vector that contains converted Euro values\neuro_vector&lt;-map_dbl(.x=usd_vector, .f=usd_to_eur)\n\n# creates dataset with USD values in one column, and corresponding converted Euro values in another\ncurrency_df&lt;-data.frame(USD_Value=usd_vector,\n                        EUR_Value=euro_vector)\n\n# prints \"currency_df\"\ncurrency_df\n\n  USD_Value    EUR_Value\n1     10.25     9.877925\n2   1245.55  1200.336535\n3     83.00    79.987100\n4     76.00    73.241200\n5  11559.00 11139.408300",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Functional Programming</span>"
    ]
  },
  {
    "objectID": "session3.html",
    "href": "session3.html",
    "title": "4  Data Processing and Wrangling",
    "section": "",
    "text": "4.1 Introduction\nIn the past two sessions, we presented some ideas, concepts, and tools that provide a basic foundation for working with data in R. Now that we have this basic foundation, we’ll turn in this session to a more applied exploration of some actual datasets. Our goal here is to introduce you to some useful functions that will allow you to explore and begin making sense of actual datasets in R. This lesson will provide a tour of various functions that can be particularly helpful as you get started processing and wrangling data in R, so that you can get your raw datasets ready for analysis and visualization. Among the topics we’ll cover today are:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Processing and Wrangling</span>"
    ]
  },
  {
    "objectID": "session3.html#introduction",
    "href": "session3.html#introduction",
    "title": "4  Data Processing and Wrangling",
    "section": "",
    "text": "Reading data into R\nHandling missing data in R\nPreparing and transforming datasets for analysis using a variety of tidyverse functions for data wrangling and processing",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Processing and Wrangling</span>"
    ]
  },
  {
    "objectID": "session3.html#preliminaries",
    "href": "session3.html#preliminaries",
    "title": "4  Data Processing and Wrangling",
    "section": "4.2 Preliminaries",
    "text": "4.2 Preliminaries",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Processing and Wrangling</span>"
    ]
  },
  {
    "objectID": "session4.html",
    "href": "session4.html",
    "title": "5  Data Analysis and Visualization",
    "section": "",
    "text": "Introduction",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Analysis and Visualization</span>"
    ]
  },
  {
    "objectID": "session5.html",
    "href": "session5.html",
    "title": "6  Tools for Reproducibility and Reporting",
    "section": "",
    "text": "Introduction",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Tools for Reproducibility and Reporting</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "7  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]